{"id": "2507.15913", "categories": ["cs.LO", "F.3"], "pdf": "https://arxiv.org/pdf/2507.15913", "abs": "https://arxiv.org/abs/2507.15913", "authors": ["Renato Neves", "Jos\u00e9 Proen\u00e7a", "Juliana Souza"], "title": "An Adequate While-Language for Stochastic Hybrid Computation", "comment": "Extended version of a paper accepted at PPDP'25", "summary": "We introduce a language for formally reasoning about programs that combine\ndifferential constructs with probabilistic ones. The language harbours, for\nexample, such systems as adaptive cruise controllers, continuous-time random\nwalks, and physical processes involving multiple collisions, like in Einstein's\nBrownian motion.\n  We furnish the language with an operational semantics and use it to implement\na corresponding interpreter. We also present a complementary, denotational\nsemantics and establish an adequacy theorem between both cases.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u95e8\u652f\u6301\u5fae\u5206\u4e0e\u6982\u7387\u6210\u5206\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u914d\u5957\u64cd\u4f5c\u548c\u6307\u79f0\u8bed\u4e49\uff0c\u65e2\u6709\u7406\u8bba\u8bc1\u660e\uff08\u5145\u5206\u6027\u5b9a\u7406\uff09\uff0c\u53c8\u6709\u5b9e\u9645\u89e3\u91ca\u5668\u5b9e\u73b0\uff0c\u5e76\u9002\u7528\u4e8e\u5982\u5e03\u6717\u8fd0\u52a8\u7b49\u590d\u6742\u7cfb\u7edf\u7684\u5f62\u5f0f\u5316\u5efa\u6a21\u3002", "motivation": "\u5f53\u524d\u5b58\u5728\u5bf9\u540c\u65f6\u5177\u6709\u5fae\u5206\u548c\u6982\u7387\u6027\u8d28\u7684\u7a0b\u5e8f\u5f62\u5f0f\u5316\u63a8\u7406\u7684\u9700\u6c42\uff0c\u6bd4\u5982\u81ea\u9002\u5e94\u5de1\u822a\u63a7\u5236\u3001\u8fde\u7eed\u968f\u673a\u6e38\u8d70\u53ca\u7269\u7406\u8fc7\u7a0b\uff08\u5982\u5e03\u6717\u8fd0\u52a8\uff09\u3002\u4f46\u662f\u5c1a\u7f3a\u4e4f\u4e13\u95e8\u652f\u6301\u8fd9\u7c7b\u7cfb\u7edf\u7684\u5f62\u5f0f\u5316\u8bed\u8a00\u548c\u76f8\u5173\u7684\u7406\u8bba\u5de5\u5177\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u80fd\u591f\u5f62\u5f0f\u5316\u63cf\u8ff0\u548c\u63a8\u7406\u540c\u65f6\u5177\u6709\u5fae\u5206\u548c\u6982\u7387\u6210\u5206\u7684\u7cfb\u7edf\uff1b\u4e3a\u8be5\u8bed\u8a00\u5b9a\u4e49\u4e86\u64cd\u4f5c\u8bed\u4e49\uff0c\u5e76\u5b9e\u73b0\u4e86\u5339\u914d\u7684\u89e3\u91ca\u5668\uff1b\u540c\u65f6\u7ed9\u51fa\u4e86\u5bf9\u5e94\u7684\u6307\u79f0\u8bed\u4e49\uff0c\u5e76\u8bc1\u660e\u4e86\u4e24\u8005\u4e4b\u95f4\u7684\u5145\u5206\u6027\u5b9a\u7406\u3002", "result": "\u6210\u529f\u5f00\u53d1\u51fa\u4e00\u95e8\u80fd\u591f\u7edf\u4e00\u5904\u7406\u5fae\u5206\u4e0e\u6982\u7387\u6784\u9020\u7684\u7a0b\u5e8f\u8bed\u8a00\uff0c\u5177\u6709\u660e\u786e\u7684\u64cd\u4f5c\u548c\u6307\u79f0\u8bed\u4e49\u57fa\u7840\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u5df2\u901a\u8fc7\u5145\u5206\u6027\u5b9a\u7406\u786e\u7acb\u3002\u6b64\u5916\uff0c\u5b9e\u73b0\u4e86\u8be5\u8bed\u8a00\u7684\u89e3\u91ca\u5668\u3002", "conclusion": "\u6587\u7ae0\u4e3a\u6d89\u53ca\u5fae\u5206\u65b9\u7a0b\u548c\u6982\u7387\u8fc7\u7a0b\u7684\u7a0b\u5e8f\u5206\u6790\u4e0e\u5efa\u6a21\u63d0\u4f9b\u4e86\u4e00\u79cd\u7edf\u4e00\u8bed\u8a00\u53ca\u7406\u8bba\u57fa\u7840\uff0c\u89e3\u51b3\u4e86\u539f\u672c\u7f3a\u4e4f\u7cfb\u7edf\u6027\u5de5\u5177\u7684\u95ee\u9898\uff0c\u5bf9\u5206\u6790\u590d\u6742\u7269\u7406\u548c\u5de5\u7a0b\u7cfb\u7edf\u5177\u6709\u91cd\u8981\u4ef7\u503c\u3002"}}
{"id": "2507.16581", "categories": ["cs.LO", "math.NT", "11B37 11J86 11B40 11K16", "F.4.0; G.2.0"], "pdf": "https://arxiv.org/pdf/2507.16581", "abs": "https://arxiv.org/abs/2507.16581", "authors": ["Joris Nieuwveld", "Jo\u00ebl Ouaknine"], "title": "On Expansions of Monadic Second-Order Logic with Dynamical Predicates", "comment": "Full version of a paper accepted to MFCS 2025", "summary": "Expansions of the monadic second-order (MSO) theory of the structure $\\langle\n\\mathbb{N} ; < \\rangle$ have been a fertile and active area of research ever\nsince the publication of the seminal papers of B\\\"uchi and Elgot & Rabin on the\nsubject in the 1960s. In the present paper, we establish decidability of the\nMSO theory of $\\langle \\mathbb{N} ; <,P \\rangle$, where $P$ ranges over a large\nclass of unary ''dynamical'' predicates, i.e., sets of non-negative values\nassumed by certain integer linear recurrence sequences. One of our key\ntechnical tools is the novel concept of (effective) prodisjunctivity, which we\nexpect may also find independent applications further afield.", "AI": {"tldr": "\u8be5\u8bba\u6587\u8bc1\u660e\u7ed3\u6784\u27e8\u2115; <\u27e9\u6dfb\u52a0\u7279\u5b9a\u52a8\u6001\u4e00\u5143\u8c13\u8bcd\u540e\uff0cMSO\u7406\u8bba\u4ecd\u53ef\u5224\u5b9a\uff0c\u5e76\u63d0\u51fa\u4e86\u53ef\u63a8\u5e7f\u7684\u65b0\u6280\u672f\u6982\u5ff5\u3002", "motivation": "\u81ea1960\u5e74\u4ee3B\u00fcchi\u4e0eElgot & Rabin\u5f00\u521b\u6027\u8bba\u6587\u4ee5\u6765\uff0c\u5173\u4e8e\u7ed3\u6784\u27e8\u2115; <\u27e9\u7684MSO\u7406\u8bba\u6269\u5c55\u4e00\u76f4\u5907\u53d7\u5173\u6ce8\u3002\u672c\u8bba\u6587\u65e8\u5728\u63a2\u7d22\u5411\u8be5\u7ed3\u6784\u6dfb\u52a0\u201c\u52a8\u6001\u201d\u4e00\u5143\u8c13\u8bcd\u540e\u7684\u53ef\u5224\u5b9a\u6027\u95ee\u9898\u3002", "method": "\u5206\u6790\u7ed3\u6784\u27e8\u2115; <,P\u27e9\uff0c\u5176\u4e2dP\u662f\u7531\u67d0\u7c7b\u6574\u6570\u7ebf\u6027\u9012\u5f52\u5e8f\u5217\u53d6\u503c\u5f97\u5230\u7684\u96c6\u5408\u3002\u5f15\u5165\u5e76\u5e94\u7528\u4e86\u65b0\u7684\u6982\u5ff5\u2014\u2014(\u6709\u6548\u7684) prodisjunctivity\uff0c\u4f5c\u4e3a\u4e3b\u8981\u6280\u672f\u5de5\u5177\u3002", "result": "\u8bc1\u660e\u4e86\u5bf9\u4e8e\u4e00\u5927\u7c7b\u52a8\u6001\u4e00\u5143\u8c13\u8bcdP\uff0c\u27e8\u2115; <,P\u27e9\u7684MSO\u7406\u8bba\u662f\u53ef\u5224\u5b9a\u7684\u3002\u63d0\u51fa\u7684prodisjunctivity\u7684\u6982\u5ff5\u8fd8\u5177\u6709\u6f5c\u5728\u7684\u72ec\u7acb\u5e94\u7528\u4ef7\u503c\u3002", "conclusion": "\u5728MSO\u7406\u8bba\u4e2d\uff0c\u5411\u27e8\u2115; <\u27e9\u7ed3\u6784\u6dfb\u52a0\u7531\u6574\u6570\u7ebf\u6027\u9012\u5f52\u5e8f\u5217\u5b9a\u4e49\u7684\u52a8\u6001\u8c13\u8bcd\u540e\uff0c\u7406\u8bba\u53ef\u5224\u5b9a\uff0c\u5e76\u5f15\u5165\u4e86\u65b0\u7684\u6280\u672f\u5de5\u5177prodisjunctivity\u3002"}}
{"id": "2507.16620", "categories": ["cs.LO", "68Q55, 03B70, 47H10, 91A05, 18C15, 68T50", "F.3.2; I.2.7; F.1.1; F.4.1"], "pdf": "https://arxiv.org/pdf/2507.16620", "abs": "https://arxiv.org/abs/2507.16620", "authors": ["Faruk Alpay", "Hamdi Al Alakkad"], "title": "Transordinal Fixed-Point Operators and Self-Referential Games: A Categorical Framework for Reflective Semantic Convergence", "comment": "16 pages, 0 figure", "summary": "We present a new theoretical framework that unifies category-theoretic\nfixed-point constructions, transfinite recursion, and game-based semantics to\nmodel how interpretations of language can stabilize through unlimited\nself-reference. By iterating a meaning-refinement operator across all ordinal\nstages, we isolate a unique \"transordinal\" fixed point and show, via a\nhierarchy of reflective games, that this same object is the sole equilibrium of\nan infinite dialogue between a text and its interpreter. The result delivers a\nmathematically rigorous account of semantic convergence without resorting to\nstatistical training or empirical benchmarks, yet remains simple to explain:\nstart with a rough meaning, let speaker and listener correct each other\nforever, and the process provably settles on a single, self-consistent\ninterpretation. Because the construction is entirely symbolic, it offers both\nprecise guarantees for formal linguistics and a blueprint for designing\nlanguage-aware systems that can reason about their own outputs. The paper\ndetails the requisite transordinal machinery, proves existence and uniqueness\ntheorems, and connects them to long-standing questions about reflection, truth,\nand equilibrium in formal systems and semantics.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u7edf\u4e00\u7684\u7406\u8bba\u67b6\u6784\uff0c\u7ed3\u5408\u8303\u7574\u8bba\u4e0d\u52a8\u70b9\u3001\u8d85\u9650\u9012\u5f52\u4e0e\u535a\u5f08\u8bed\u4e49\uff0c\u6570\u5b66\u4e25\u5bc6\u5730\u89e3\u91ca\u4e86\u5728\u65e0\u9650\u81ea\u6307\u4e0e\u4fee\u6b63\u8fc7\u7a0b\u4e2d\u8bed\u4e49\u5982\u4f55\u7a33\u5b9a\u6536\u655b\u3002\u65e0\u9700\u6570\u636e\u9a71\u52a8\uff0c\u7406\u8bba\u4fdd\u8bc1\u552f\u4e00\u81ea\u6d3d\u89e3\u91ca\uff0c\u5bf9\u4e8e\u5f62\u5f0f\u8bed\u8a00\u5b66\u53ca\u5177\u81ea\u6211\u53cd\u601d\u80fd\u529b\u7684\u8bed\u8a00\u7cfb\u7edf\u8bbe\u8ba1\u5177\u6709\u91cd\u8981\u610f\u4e49\u3002", "motivation": "\u73b0\u6709\u8bed\u4e49\u6536\u655b\u4e0e\u81ea\u53cd\u6027\u95ee\u9898\u5f80\u5f80\u4f9d\u8d56\u7edf\u8ba1\u6216\u5b9e\u8bc1\u65b9\u6cd5\uff0c\u7f3a\u4e4f\u5f62\u5f0f\u5316\u4e14\u901a\u7528\u7684\u7406\u8bba\u63cf\u8ff0\u3002\u8be5\u6587\u8bd5\u56fe\u6784\u5efa\u4e00\u4e2a\u7edf\u4e00\u7684\u7406\u8bba\u6846\u67b6\uff0c\u4e25\u5bc6\u89e3\u91ca\u901a\u8fc7\u65e0\u9650\u81ea\u6307\u3001\u4fee\u6b63\u5982\u4f55\u83b7\u5f97\u7a33\u5b9a\u89e3\u91ca\uff08\u8bed\u4e49\u6536\u655b\uff09\uff0c\u5e76\u4e3a\u5f62\u5f0f\u8bed\u8a00\u5b66\u53ca\u81ea\u6211\u63a8\u7406\u578b\u8bed\u8a00\u7cfb\u7edf\u63d0\u4f9b\u7406\u8bba\u57fa\u7840\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u878d\u5408\u8303\u7574\u8bba\u3001\u4e0d\u52a8\u70b9\u6784\u9020\u3001\u8d85\u9650\u9012\u5f52\u4e0e\u535a\u5f08\u8bed\u4e49\u7684\u65b0\u7406\u8bba\u6846\u67b6\u3002\u901a\u8fc7\u5728\u6240\u6709\u5e8f\u6570\u9636\u6bb5\u8fed\u4ee3\u610f\u4e49\u4fee\u6b63\u7b97\u5b50\uff0c\u6700\u7ec8\u83b7\u5f97\u552f\u4e00\u7684\u201c\u8d85\u5e8f\u5217\u201d\u4e0d\u52a8\u70b9\uff0c\u5e76\u501f\u52a9\u53cd\u601d\u6027\u535a\u5f08\u5c42\u7ea7\u8bc1\u660e\u8be5\u5bf9\u8c61\u662f\u6587\u672c\u4e0e\u89e3\u91ca\u8005\u4e4b\u95f4\u65e0\u9650\u5bf9\u8bdd\u7684\u552f\u4e00\u5747\u8861\u70b9\u3002\u7ed9\u51fa\u8d85\u5e8f\u5217\u673a\u5236\u7684\u5f62\u5f0f\u63cf\u8ff0\uff0c\u5b58\u5728\u6027\u4e0e\u552f\u4e00\u6027\u5b9a\u7406\u7684\u4e25\u683c\u8bc1\u660e\uff0c\u5e76\u5bf9\u7167\u5f62\u5f0f\u7cfb\u7edf\u4e2d\u7684\u53cd\u601d\u3001\u771f\u7406\u4e0e\u7a33\u5b9a\u5747\u8861\u7b49\u95ee\u9898\u8fdb\u884c\u7406\u8bba\u8054\u7cfb\u3002", "result": "\u7406\u8bba\u4e0a\u8bc1\u660e\u4e86\u610f\u4e49\u4fee\u6b63\u8fc7\u7a0b\u5fc5\u7136\u6536\u655b\u5230\u552f\u4e00\u4e14\u81ea\u6d3d\u7684\u89e3\u91ca\uff0c\u65e0\u9700\u4f9d\u8d56\u7ecf\u9a8c\u6570\u636e\u6216\u7edf\u8ba1\u65b9\u6cd5\uff0c\u5bf9\u5f62\u5f0f\u8bed\u8a00\u5b66\u548c\u81ea\u6211\u53cd\u7701\u7684\u8bed\u8a00\u7cfb\u7edf\u8bbe\u8ba1\u7b97\u51fa\u4e86\u53ef\u9a8c\u8bc1\u7684\u6570\u5b66\u4fdd\u969c\uff0c\u8fde\u63a5\u4e86\u53cd\u6620\u6027\u3001\u771f\u7406\u4e0e\u8bed\u4e49\u5747\u8861\u7b49\u6df1\u5c42\u95ee\u9898\u3002", "conclusion": "\u901a\u8fc7\u5b8c\u5168\u7b26\u53f7\u5316\u7684\u65b9\u6cd5\uff0c\u9996\u6b21\u4e25\u5bc6\u63cf\u8ff0\u4e86\u8bed\u4e49\u6536\u655b\u673a\u5236\uff0c\u4e3a\u8bed\u8a00\u89e3\u91ca\u7684\u5f62\u5f0f\u5316\u7814\u7a76\u63d0\u4f9b\u7edf\u4e00\u3001\u4e00\u822c\u6027\u7684\u7406\u8bba\u652f\u6491\uff0c\u540c\u65f6\u4e3a\u6784\u5efa\u80fd\u81ea\u52a8\u63a8\u7406\u81ea\u8eab\u8f93\u51fa\u7684\u8bed\u8a00\u667a\u80fd\u7cfb\u7edf\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2507.15887", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.15887", "abs": "https://arxiv.org/abs/2507.15887", "authors": ["Ori Press", "Brandon Amos", "Haoyu Zhao", "Yikai Wu", "Samuel K. Ainsworth", "Dominik Krupke", "Patrick Kidger", "Touqir Sajed", "Bartolomeo Stellato", "Jisun Park", "Nathanael Bosch", "Eli Meril", "Albert Steppi", "Arman Zharmagambetov", "Fangzhao Zhang", "David Perez-Pineiro", "Alberto Mercurio", "Ni Zhan", "Talor Abramovich", "Kilian Lieret", "Hanlin Zhang", "Shirley Huang", "Matthias Bethge", "Ofir Press"], "title": "AlgoTune: Can Language Models Speed Up General-Purpose Numerical Programs?", "comment": null, "summary": "Despite progress in language model (LM) capabilities, evaluations have thus\nfar focused on models' performance on tasks that humans have previously solved,\nincluding in programming (Jimenez et al., 2024) and mathematics (Glazer et al.,\n2024). We therefore propose testing models' ability to design and implement\nalgorithms in an open-ended benchmark: We task LMs with writing code that\nefficiently solves computationally challenging problems in computer science,\nphysics, and mathematics. Our AlgoTune benchmark consists of 155 coding tasks\ncollected from domain experts and a framework for validating and timing\nLM-synthesized solution code, which is compared to reference implementations\nfrom popular open-source packages. In addition, we develop a baseline LM agent,\nAlgoTuner, and evaluate its performance across a suite of frontier models.\nAlgoTuner achieves an average 1.72x speedup against our reference solvers,\nwhich use libraries such as SciPy, sk-learn and CVXPY. However, we find that\ncurrent models fail to discover algorithmic innovations, instead preferring\nsurface-level optimizations. We hope that AlgoTune catalyzes the development of\nLM agents exhibiting creative problem solving beyond state-of-the-art human\nperformance.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u9488\u5bf9\u7b97\u6cd5\u521b\u65b0\u80fd\u529b\u7684\u65b0\u57fa\u51c6AlgoTune\uff0c\u5e76\u5c55\u793a\u4e86\u73b0\u6709\u5927\u6a21\u578b\u7f3a\u4e4f\u521b\u65b0\u4f46\u80fd\u5b9e\u73b0\u4e00\u5b9a\u901f\u5ea6\u63d0\u5347\uff0c\u65e8\u5728\u6fc0\u53d1\u66f4\u5177\u521b\u65b0\u6027\u7684\u8bed\u8a00\u6a21\u578b\u7814\u7a76\u3002", "motivation": "\u5f53\u524d\u5927\u6a21\u578b\u8bed\u8a00\u6a21\u578b\uff08LM\uff09\u7684\u8bc4\u4f30\u4e3b\u8981\u96c6\u4e2d\u5728\u4eba\u7c7b\u5df2\u77e5\u5982\u4f55\u89e3\u51b3\u7684\u4efb\u52a1\u4e0a\uff0c\u800c\u672a\u80fd\u8861\u91cf\u5176\u5728\u5f00\u653e\u6027\u3001\u521b\u65b0\u6027\u7b97\u6cd5\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u65b9\u9762\u7684\u80fd\u529b\u3002\u4e3a\u63a8\u52a8\u8be5\u9886\u57df\u7684\u53d1\u5c55\uff0c\u9700\u8981\u4e00\u79cd\u80fd\u591f\u6fc0\u53d1\u6a21\u578b\u521b\u65b0\u6027\u548c\u590d\u6742\u5ea6\u7406\u89e3\u7684\u5168\u65b0\u8bc4\u6d4b\u65b9\u6cd5\u3002", "method": "\u672c\u6587\u63d0\u51fa\u4e86AlgoTune\u57fa\u51c6\uff0c\u5305\u62ec155\u4e2a\u7531\u9886\u57df\u4e13\u5bb6\u6536\u96c6\u7684\u7f16\u7801\u4efb\u52a1\uff0c\u8de8\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u7269\u7406\u4e0e\u6570\u5b66\u7b49\u5b66\u79d1\u3002\u57fa\u51c6\u6846\u67b6\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\u4ee3\u7801\u7684\u9a8c\u8bc1\u548c\u8ba1\u65f6\u673a\u5236\uff0c\u5e76\u5c06\u6a21\u578b\u5408\u6210\u4ee3\u7801\u4e0e\u4e3b\u6d41\u5f00\u6e90\u5e93\u7684\u53c2\u8003\u5b9e\u73b0\u8fdb\u884c\u6bd4\u8f83\u3002\u6b64\u5916\uff0c\u4f5c\u8005\u5f00\u53d1\u4e86\u57fa\u7ebf\u8bed\u8a00\u6a21\u578b\u4ee3\u7406AlgoTuner\uff0c\u5e76\u5728\u591a\u79cd\u524d\u6cbf\u6a21\u578b\u4e0a\u8fdb\u884c\u4e86\u8bc4\u6d4b\u3002", "result": "AlgoTuner\u5728\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u5e73\u5747\u6bd4\u53c2\u8003\u89e3\u7b97\u5668\uff08\u5982SciPy\u3001sk-learn\u3001CVXPY\u7b49\u5e93\uff09\u5feb1.72\u500d\u3002\u4f46\u73b0\u6709\u6a21\u578b\u66f4\u503e\u5411\u4e8e\u8868\u5c42\u4f18\u5316\uff0c\u5c1a\u672a\u5c55\u73b0\u51fa\u7b97\u6cd5\u521b\u65b0\u80fd\u529b\u3002", "conclusion": "\u672c\u6587\u7684AlgoTune\u57fa\u51c6\u53ca\u8bc4\u6d4b\u7ed3\u679c\u8868\u660e\u5f53\u524d\u5927\u6a21\u578b\u5728\u7b97\u6cd5\u521b\u65b0\u4e0e\u6df1\u5c42\u6b21\u95ee\u9898\u6c42\u89e3\u65b9\u9762\u4ecd\u6709\u8f83\u5927\u63d0\u5347\u7a7a\u95f4\u3002\u5e0c\u671b\u8be5\u57fa\u51c6\u80fd\u63a8\u52a8\u66f4\u5177\u521b\u9020\u529b\u548c\u8d85\u8d8a\u4eba\u7c7b\u8868\u73b0\u7684\u6a21\u578b\u4ee3\u7406\u7684\u53d1\u5c55\u3002"}}
{"id": "2507.16051", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2507.16051", "abs": "https://arxiv.org/abs/2507.16051", "authors": ["Juan Altmayer Pizzorno", "Emery D. Berger"], "title": "RightTyper: Effective and Efficient Type Annotation for Python", "comment": null, "summary": "Python type annotations bring the benefits of static type checking to the\nlanguage. However, manually writing annotations can be time-consuming and\ntedious. The result is that most real-world Python code remains largely\nuntyped. Past approaches to annotating types in Python code fall short in a\nnumber of ways. Static approaches struggle with dynamic features and infer\noverly broad types. AI-based methods are inherently unsound and can miss rare\nor user-defined types. Dynamic methods can impose extreme runtime overheads,\ndegrading performance by up to 270x, abort execution as they exhaust resources,\nand even infer incorrect types that lead to runtime errors. Crucially, all\nprior work assumes implicitly that the code to be annotated is already correct.\nThis assumption is generally unwarranted, especially for large codebases that\nhave been untyped.\n  This paper presents RightTyper, a novel approach for Python that overcomes\nthese disadvantages. RightTyper not only generates precise type annotations\nbased on actual program behavior, improving recall in type checking relative to\nprior approaches. It also turns type checking into anomaly detection, allowing\nthe type checker to identify corner cases that the programmer can audit for\nunintended behavior. RightTyper is also fast and space-efficient, imposing just\n30% performance overhead on average. RightTyper achieves these characteristics\nby a principled yet pervasive use of sampling--guided by self-profiling--along\nwith statistical filtering and careful resolution and aggregation of type\ninformation.", "AI": {"tldr": "RightTyper \u7528\u52a8\u6001\u91c7\u6837+\u7edf\u8ba1\u65b9\u6cd5\uff0c\u4e3a\u672a\u6807\u6ce8 Python \u4ee3\u7801\u9ad8\u6548\u751f\u6210\u7cbe\u51c6\u7c7b\u578b\u6ce8\u89e3\uff0c\u628a\u7c7b\u578b\u68c0\u67e5\u53d8\u6210\u5f02\u5e38\u667a\u80fd\u68c0\u6d4b\uff0c\u6027\u80fd\u5f00\u9500\u5c0f\uff0c\u6548\u679c\u66f4\u597d\u3002", "motivation": "Python \u9759\u6001\u7c7b\u578b\u6807\u6ce8\u6709\u8bf8\u591a\u597d\u5904\uff0c\u4f46\u624b\u5de5\u6ce8\u91ca\u7e41\u7410\uff0c\u73b0\u6709\u81ea\u52a8\u7c7b\u578b\u63a8\u65ad\u65b9\u6cd5\u8981\u4e48\u4e0d\u7cbe\u786e\uff0c\u8981\u4e48\u6027\u80fd\u5f00\u9500\u5927\uff0c\u8981\u4e48\u65e0\u6cd5\u53d1\u73b0\u7528\u6237\u81ea\u5b9a\u4e49\u548c\u7a00\u6709\u7c7b\u578b\uff0c\u4e14\u5927\u591a\u5047\u5b9a\u4ee3\u7801\u672c\u8eab\u5df2\u6b63\u786e\uff0c\u8fd9\u5bf9\u4e8e\u5927\u89c4\u6a21\u672a\u6ce8\u91ca\u4ee3\u7801\u5e93\u666e\u904d\u4e0d\u6210\u7acb\u3002", "method": "RightTyper \u57fa\u4e8e\u91c7\u6837\u7684\u52a8\u6001\u5206\u6790\uff0c\u5229\u7528\u81ea\u6211\u5206\u6790\u3001\u81ea\u9002\u5e94\u91c7\u6837\u7b56\u7565\u3001\u7edf\u8ba1\u8fc7\u6ee4\u548c\u7ec6\u7c92\u5ea6\u7c7b\u578b\u4fe1\u606f\u7684\u805a\u5408\uff0c\u65e2\u907f\u514d\u4e86\u4f20\u7edf\u52a8\u6001\u65b9\u6cd5\u7684\u9ad8\u5f00\u9500\uff0c\u53c8\u4fdd\u969c\u4e86\u63a8\u65ad\u7684\u7cbe\u786e\u6027\u548c\u9ad8\u53ec\u56de\u7387\u3002", "result": "RightTyper \u76f8\u6bd4\u4ee5\u5f80\u65b9\u6cd5\u80fd\u591f\u66f4\u5168\u9762\u5730\u751f\u6210\u7cbe\u786e\u7c7b\u578b\u4fe1\u606f\uff0c\u5e76\u5c06\u7c7b\u578b\u5f02\u5e38\u68c0\u6d4b\u878d\u5165\u4ee3\u7801\u5206\u6790\u4e2d\uff0c\u5e73\u5747\u4ec5\u5e26\u6765 30% \u6027\u80fd\u5f00\u9500\uff0c\u5927\u5e45\u63d0\u5347\u4e86\u7c7b\u578b\u63a8\u65ad\u7684\u53ef\u9760\u6027\u548c\u5b9e\u7528\u6027\u3002", "conclusion": "RightTyper \u80fd\u6709\u6548\u751f\u6210\u7cbe\u786e\u7684 Python \u7c7b\u578b\u6ce8\u89e3\uff0c\u540c\u65f6\u8fd8\u80fd\u5c06\u7c7b\u578b\u68c0\u67e5\u8f6c\u53d8\u4e3a\u5f02\u5e38\u68c0\u6d4b\uff0c\u4ece\u800c\u5e2e\u52a9\u5f00\u53d1\u8005\u53d1\u73b0\u6f5c\u5728\u7684\u7a0b\u5e8f\u884c\u4e3a\u5f02\u5e38\u3002\u8be5\u65b9\u6cd5\u9ad8\u6548\u3001\u6027\u80fd\u5f00\u9500\u4f4e\u3002"}}
{"id": "2507.16648", "categories": ["cs.DM", "cs.CC", "cs.DS", "math.CO"], "pdf": "https://arxiv.org/pdf/2507.16648", "abs": "https://arxiv.org/abs/2507.16648", "authors": ["Eleon Bach", "Yann Disser", "Sophie Huiberts", "Nils Mosis"], "title": "An unconditional lower bound for the active-set method in convex quadratic maximization", "comment": null, "summary": "We prove that the active-set method needs an exponential number of iterations\nin the worst-case to maximize a convex quadratic function subject to linear\nconstraints, regardless of the pivot rule used. This substantially improves\nover the best previously known lower bound [IPCO 2025], which needs objective\nfunctions of polynomial degrees $\\omega(\\log d)$ in dimension $d$, to a bound\nusing a convex polynomial of degree 2. In particular, our result firmly\nresolves the open question [IPCO 2025] of whether a constant degree suffices,\nand it represents significant progress towards linear objectives, where the\nactive-set method coincides with the simplex method and a lower bound for all\npivot rules would constitute a major breakthrough.\n  Our result is based on a novel extended formulation, recursively constructed\nusing deformed products. Its key feature is that it projects onto a polygonal\napproximation of a parabola while preserving all of its exponentially many\nvertices. We define a quadratic objective that forces the active-set method to\nfollow the parabolic boundary of this projection, without allowing any\nshortcuts along chords corresponding to edges of its full-dimensional preimage.", "AI": {"tldr": "\u8be5\u8bba\u6587\u8bc1\u660e\uff1a\u5373\u4f7f\u76ee\u6807\u51fd\u6570\u4e3a\u7b80\u5355\u51f8\u4e8c\u6b21\u578b\uff0c\u4e3b\u52a8\u96c6\u6cd5\uff08\u65e0\u8bba\u91c7\u7528\u54ea\u79cdpivot\u89c4\u5219\uff09\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u6307\u6570\u8fed\u4ee3\u6b65\uff0c\u89e3\u51b3\u4e86\u7ebf\u6027\u6216\u4f4e\u6b21\u6570\u76ee\u6807\u662f\u5426\u8db3\u4ee5\u6784\u9020\u6307\u6570\u4e0b\u754c\u8fd9\u4e00\u516c\u5f00\u96be\u9898\uff0c\u5bf9\u76f8\u5173\u4f18\u5316\u7b97\u6cd5\u590d\u6742\u6027\u7406\u8bba\u6709\u6df1\u8fdc\u610f\u4e49\u3002", "motivation": "\u6b64\u524d\u5173\u4e8e\u4e3b\u52a8\u96c6\u65b9\u6cd5\uff08active-set method\uff09\u5728\u4f18\u5316\u51f8\u4e8c\u6b21\u51fd\u6570\u65f6\uff0c\u5176\u6700\u574f\u60c5\u51b5\u4e0b\u8fed\u4ee3\u6b21\u6570\u7684\u4e0b\u754c\u4ecd\u5b58\u5728\u672a\u89e3\u95ee\u9898\uff0c\u4e14\u5df2\u77e5\u6700\u597d\u4e0b\u754c\u9700\u8981\u9ad8\u6b21\u6570\u591a\u9879\u5f0f\u76ee\u6807\uff0c\u5e76\u672a\u89e3\u51b3\u662f\u5426\u5e38\u6570\u6b21\u6570\u76ee\u6807\u5373\u8db3\u591f\u63d0\u51fa\u6307\u6570\u4e0b\u754c\u3002\u89e3\u51b3\u8be5\u516c\u5f00\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u6709\u91cd\u8981\u7406\u8bba\u610f\u4e49\uff0c\u7279\u522b\u662f\u5bf9\u7406\u89e3\u4e0e\u5355\u7eaf\u5f62\u6cd5\u76f8\u5173\u7684\u6781\u9650\u3002", "method": "\u4f5c\u8005\u57fa\u4e8e\u4e00\u4e2a\u65b0\u9896\u7684\u6269\u5c55\u5f62\u5f0f\u9012\u5f52\u6784\u9020\uff08\u4f7f\u7528\u5f62\u53d8\u4e58\u79ef\uff09\uff0c\u8be5\u591a\u9762\u4f53\u6620\u5c04\u5230\u629b\u7269\u7ebf\u7684\u5206\u6bb5\u591a\u8fb9\u5f62\u8fd1\u4f3c\uff0c\u5e76\u4fdd\u7559\u4e86\u6307\u6570\u7ea7\u591a\u9762\u4f53\u9876\u70b9\u3002\u53c8\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u4e8c\u6b21\u76ee\u6807\u51fd\u6570\uff0c\u8feb\u4f7f\u4e3b\u52a8\u96c6\u65b9\u6cd5\u8ddf\u968f\u6b64\u629b\u7269\u7ebf\u8fb9\u754c\uff0c\u907f\u514d\u6cbf\u9ad8\u7ef4\u591a\u9762\u4f53\u8fb9\u8d70\u6377\u5f84\u3002\u5168\u4f53\u5206\u6790\u5bf9\u6240\u6709pivot\u89c4\u5219\u90fd\u6210\u7acb\u3002", "result": "\u4e3b\u52a8\u96c6\u65b9\u6cd5\u5728\u51f8\u4e8c\u6b21\u76ee\u6807\u4e14\u7ebf\u6027\u7ea6\u675f\u4e0b\uff0c\u65e0\u8bba\u91c7\u7528\u4f55\u79cdpivot\u89c4\u5219\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u90fd\u9700\u6307\u6570\u8fed\u4ee3\u3002\u6b64\u5de5\u4f5c\u5927\u5e45\u63d0\u5347\u4e86\u6b64\u524d\u7684\u7ed3\u679c\uff1a\u4ece\u9700\u8981\u9ad8\u6b21\u6570\u591a\u9879\u5f0f\u76ee\u6807\u63d0\u5347\u5230\u5e38\u6570\uff082\uff09\u6b21\u591a\u9879\u5f0f\u76ee\u6807\uff0c\u5e76\u660e\u786e\u56de\u7b54\u4e86\u5e38\u6570\u6b21\u6570\u76ee\u6807\u662f\u5426\u8db3\u591f\u8fd9\u4e2a\u516c\u5f00\u95ee\u9898\u3002", "conclusion": "\u4e3b\u52a8\u96c6\u65b9\u6cd5\u5373\u4f7f\u5728\u6700\u7b80\u5355\u7684\u51f8\u4e8c\u6b21\u76ee\u6807\u4e0b\u4e5f\u6709\u672c\u8d28\u6781\u9650\uff0c\u4e3a\u6240\u6709pivot\u89c4\u5219\u7edf\u4e00\u6784\u6210\u4e86\u6307\u6570\u7ea7\u6700\u574f\u8fed\u4ee3\u4e0b\u754c\uff0c\u8fd9\u4e00\u53d1\u73b0\u4e3a\u7406\u89e3\u76f8\u5173\u591a\u9762\u4f53\u6cd5\u7684\u590d\u6742\u5ea6\u74f6\u9888\u63d0\u4f9b\u4e86\u575a\u5b9e\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2507.15863", "categories": ["cs.CL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15863", "abs": "https://arxiv.org/abs/2507.15863", "authors": ["Isaac Shi", "Zeyuan Li", "Fan Liu", "Wenli Wang", "Lewei He", "Yang Yang", "Tianyu Shi"], "title": "eSapiens's DEREK Module: Deep Extraction & Reasoning Engine for Knowledge with LLMs", "comment": "8 pages;1 figure;5 tables", "summary": "We present the DEREK (Deep Extraction & Reasoning Engine for Knowledge)\nModule, a secure and scalable Retrieval-Augmented Generation pipeline designed\nspecifically for enterprise document question answering. Designed and\nimplemented by eSapiens, the system ingests heterogeneous content (PDF, Office,\nweb), splits it into 1,000-token overlapping chunks, and indexes them in a\nhybrid HNSW+BM25 store. User queries are refined by GPT-4o, retrieved via\ncombined vector+BM25 search, reranked with Cohere, and answered by an LLM using\nCO-STAR prompt engineering. A LangGraph verifier enforces citation overlap,\nregenerating answers until every claim is grounded. On four LegalBench subsets,\n1000-token chunks improve Recall@50 by approximately 1 pp and hybrid+rerank\nboosts Precision@10 by approximately 7 pp; the verifier raises TRACe\nUtilization above 0.50 and limits unsupported statements to less than 3%. All\ncomponents run in containers, enforce end-to-end TLS 1.3 and AES-256. These\nresults demonstrate that the DEREK module delivers accurate, traceable, and\nproduction-ready document QA with minimal operational overhead. The module is\ndesigned to meet enterprise demands for secure, auditable, and context-faithful\nretrieval, providing a reliable baseline for high-stakes domains such as legal\nand finance.", "AI": {"tldr": "DEREK\u6a21\u5757\u5b9e\u73b0\u4e86\u9762\u5411\u4f01\u4e1a\u7684\u9ad8\u5b89\u5168\u3001\u53ef\u8ffd\u6eaf\u7684\u6587\u6863\u95ee\u7b54\u7cfb\u7edf\uff0c\u7ed3\u5408\u6df7\u5408\u68c0\u7d22\u3001\u91cd\u6392\u5e8f\u548c\u81ea\u52a8\u9a8c\u8bc1\uff0c\u5728\u6cd5\u5f8b\u57fa\u51c6\u96c6\u4e0a\u8868\u73b0\u5353\u8d8a\uff0c\u9002\u5408\u9ad8\u98ce\u9669\u9886\u57df\u751f\u4ea7\u90e8\u7f72\u3002", "motivation": "\u4f01\u4e1a\u5728\u6cd5\u5f8b\u548c\u91d1\u878d\u7b49\u9ad8\u98ce\u9669\u9886\u57df\u5bf9\u4e8e\u6587\u6863\u95ee\u7b54\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3001\u53ef\u8ffd\u6eaf\u6027\u548c\u51c6\u786e\u6027\u6709\u8feb\u5207\u9700\u6c42\uff0c\u73b0\u6709\u65b9\u6cd5\u5728\u5904\u7406\u5f02\u6784\u5185\u5bb9\u548c\u63d0\u5347\u68c0\u7d22\u95ee\u7b54\u7684\u53ef\u8ffd\u6eaf\u6027\u65b9\u9762\u5b58\u5728\u4e0d\u8db3\u3002", "method": "\u63d0\u51fa\u4e86DEREK\u6a21\u5757\uff0c\u96c6\u6210\u6df7\u5408\u5411\u91cf\uff08HNSW+BM25\uff09\u7d22\u5f15\u3001Cohere\u91cd\u6392\u5e8f\u3001LangGraph\u9a8c\u8bc1\u5668\uff0c\u5e76\u5229\u7528LLM\u548cCO-STAR\u63d0\u793a\u8bcd\u8fdb\u884c\u751f\u6210\uff0c\u6240\u6709\u73af\u8282\u5747\u652f\u6301TLS 1.3\u4e0eAES-256\u52a0\u5bc6\u4fdd\u969c\u5b89\u5168\u3002\u7cfb\u7edf\u80fd\u5904\u7406\u591a\u7c7b\u578b\u6587\u4ef6\uff0c\u901a\u8fc71000token\u91cd\u53e0\u5206\u5757\uff0c\u7d22\u5f15\u4e0e\u68c0\u7d22\u7ed3\u5408\u5411\u91cf\u548c\u5173\u952e\u8bcd\u641c\u7d22\uff0c\u8f93\u51fa\u7ecf\u9a8c\u8bc1\u548c\u53ef\u8ffd\u6eaf\u7684\u7b54\u6848\u3002", "result": "\u7cfb\u7edf\u5728LegalBench\u56db\u4e2a\u5b50\u96c6\u4e0a\uff0c1000token\u5206\u5757\u63d0\u5347Recall@50\u7ea61\u4e2a\u767e\u5206\u70b9\uff0c\u6df7\u5408\u68c0\u7d22+\u91cd\u6392\u5e8f\u63d0\u5347Precision@10\u7ea67\u4e2a\u767e\u5206\u70b9\uff0c\u9a8c\u8bc1\u6a21\u5757\u5c06TRACe Utilization\u63d0\u9ad8\u52300.50\u4ee5\u4e0a\uff0c\u4e14\u4e0d\u652f\u6301\u7684\u9648\u8ff0\u4f4e\u4e8e3%\u3002\u6a21\u5757\u7a33\u5b9a\u5b89\u5168\uff0c\u8fd0\u7ef4\u6210\u672c\u4f4e\u3002", "conclusion": "DEREK\u6a21\u5757\u53ef\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u9ad8\u5b89\u5168\u3001\u6613\u8ffd\u6eaf\u3001\u9ad8\u7cbe\u5ea6\u7684\u6587\u6863\u95ee\u7b54\u6d41\u7a0b\uff0c\u7279\u522b\u9002\u7528\u4e8e\u6cd5\u5f8b\u4e0e\u91d1\u878d\u7b49\u9ad8\u8981\u6c42\u73af\u5883\uff0c\u5177\u6709\u5b9e\u9645\u751f\u4ea7\u53ef\u7528\u6027\u548c\u63a8\u5e7f\u4ef7\u503c\u3002"}}
{"id": "2507.15889", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15889", "abs": "https://arxiv.org/abs/2507.15889", "authors": ["Noah van der Vleuten"], "title": "Dr. Boot: Bootstrapping Program Synthesis Language Models to Perform Repairing", "comment": "Master's thesis, University of Amsterdam, 2023\n  (https://scripties.uba.uva.nl/search?id=record_54126). Code and experiments\n  available at: https://github.com/NoahVl/Dr-Boot", "summary": "Language models for program synthesis are usually trained and evaluated on\nprogramming competition datasets (MBPP, APPS). However, these datasets are\nlimited in size and quality, while these language models are extremely data\nhungry. Additionally, the language models have a misaligned program synthesis\nprocess compared to humans. While humans iteratively develop code with the help\nof a compiler, most program synthesis models currently produce code in one go.\nTo solve these issues, we introduce a bootstrapping algorithm for program\nsynthesis, that supports teaching models how to repair. We show that\nbootstrapping consistently outperforms regular fine-tuning. Compared to other\nwork, our bootstrapped model performs on par with fine-tuned models that are\n68\\% larger. Notably, bootstrapping with repairing also improves non-repairing\nperformance compared to regular bootstrapping during inference. However, on our\nmodels, repairing during inference is likely inferior to simply sampling the\nsame number of solutions. Furthermore, we find that there are issues with the\nexample test cases in the training portion of the APPS dataset that are\nvaluable to the community, as many repairing and reinforcement learning methods\nrely on them.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u901a\u8fc7\u81ea\u4e3e\u7b97\u6cd5\u8bad\u7ec3\u7a0b\u5e8f\u5408\u6210\u8bed\u8a00\u6a21\u578b\u4ee5\u83b7\u5f97\u4fee\u590d\u80fd\u529b\uff0c\u76f8\u8f83\u4e8e\u5e38\u89c4\u5fae\u8c03\u663e\u8457\u63d0\u5347\u6a21\u578b\u6027\u80fd\uff0c\u582a\u6bd4\u66f4\u5927\u89c4\u6a21\u7684\u5fae\u8c03\u6a21\u578b\uff0c\u540c\u65f6\u6307\u51faAPPS\u6570\u636e\u96c6\u5728\u8bad\u7ec3\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u7684\u7a0b\u5e8f\u5408\u6210\u8bed\u8a00\u6a21\u578b\u901a\u5e38\u4f9d\u8d56\u7f16\u7a0b\u7ade\u8d5b\u6570\u636e\u96c6\uff08\u5982MBPP\u3001APPS\uff09\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u4f53\u91cf\u5c0f\u4e14\u8d28\u91cf\u6709\u9650\uff0c\u800c\u5927\u8bed\u8a00\u6a21\u578b\u9700\u8981\u5927\u91cf\u6570\u636e\u3002\u6b64\u5916\uff0c\u5f53\u524d\u6a21\u578b\u4e00\u6b21\u6027\u751f\u6210\u4ee3\u7801\u7684\u65b9\u5f0f\u4e0e\u4eba\u7c7b\u901a\u8fc7\u7f16\u8bd1\u5668\u8fed\u4ee3\u5f00\u53d1\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e0d\u7b26\u3002", "method": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u4e8e\u7a0b\u5e8f\u5408\u6210\u7684\u81ea\u4e3e\uff08bootstrapping\uff09\u7b97\u6cd5\uff0c\u4f7f\u6a21\u578b\u80fd\u591f\u5b66\u4e60\u5982\u4f55\u4fee\u590d\u4ee3\u7801\u9519\u8bef\uff0c\u5373\u6559\u4f1a\u6a21\u578b\u4fee\u590d\u7684\u80fd\u529b\u3002\u8be5\u65b9\u6cd5\u4e0e\u5e38\u89c4\u5fae\u8c03\uff08fine-tuning\uff09\u65b9\u6cd5\u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u5728\u6a21\u578b\u63a8\u7406\u9636\u6bb5\u8003\u5bdf\u4e86\u4fee\u590d\u884c\u4e3a\u7684\u4f5c\u7528\u3002", "result": "\u81ea\u4e3e\u7b97\u6cd5\u5728\u5b9e\u9a8c\u4e2d\u6548\u679c\u666e\u904d\u4f18\u4e8e\u5e38\u89c4\u5fae\u8c03\uff0c\u4e0e\u6bd4\u81ea\u8eab\u592768%\u7684\u5fae\u8c03\u6a21\u578b\u6027\u80fd\u76f8\u5f53\u3002\u5728\u63a8\u7406\u9636\u6bb5\uff0c\u5e26\u6709\u4fee\u590d\u80fd\u529b\u7684\u81ea\u4e3e\u8fd8\u80fd\u63d0\u5347\u4e0d\u4fee\u590d\u65f6\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u5728\u63a8\u7406\u65f6\u76f4\u63a5\u4fee\u590d\u4e0d\u5982\u7b80\u5355\u591a\u91c7\u6837\u89e3\u7b54\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0cAPPS\u6570\u636e\u96c6\u8bad\u7ec3\u90e8\u5206\u7684\u6d4b\u8bd5\u7528\u4f8b\u5b58\u5728\u95ee\u9898\uff0c\u8fd9\u5bf9\u4f9d\u8d56\u8fd9\u4e9b\u6570\u636e\u7684\u76f8\u5173\u65b9\u6cd5\u6709\u5f71\u54cd\u3002", "conclusion": "\u5e26\u6709\u4fee\u590d\u80fd\u529b\u7684\u81ea\u4e3e\u7b97\u6cd5\u663e\u8457\u63d0\u5347\u4e86\u7a0b\u5e8f\u5408\u6210\u6a21\u578b\u7684\u6027\u80fd\uff0c\u4f53\u73b0\u51fa\u4fee\u590d\u80fd\u529b\u7684\u8fc1\u79fb\u589e\u76ca\uff0c\u5e76\u66b4\u9732\u4e86\u5f53\u524d\u6570\u636e\u96c6\u5b58\u5728\u7684\u7f3a\u9677\u3002"}}
{"id": "2507.16086", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.16086", "abs": "https://arxiv.org/abs/2507.16086", "authors": ["Andrew Marmaduke", "Apoorv Ingle", "J. Garrett Morris"], "title": "Understanding Haskell-style Overloading via Open Data and Open Functions", "comment": null, "summary": "We present a new, uniform semantics for Haskell-style overloading. We realize\nour approach in a new core language, System F$_\\mathrm{D}$, whose metatheory we\nmechanize in the Lean4 interactive theorem prover. System F$_\\mathrm{D}$ is\ndistinguished by its open data types and open functions, each given by a\ncollection of instances rather than by a single definition. We show that System\nF$_\\mathrm{D}$ can encode advanced features of Haskell's of type class systems,\nmore expressively than current semantics of these features, and without\nassuming additional type equality axioms.", "AI": {"tldr": "\u4f5c\u8005\u4ee5System F$_\\mathrm{D}$\u4e3a\u57fa\u7840\uff0c\u63d0\u51fa\u4e86Haskell\u7c7b\u578b\u7c7b\u91cd\u8f7d\u7684\u65b0\u7edf\u4e00\u8bed\u4e49\uff0c\u5177\u5907\u66f4\u9ad8\u8868\u8fbe\u80fd\u529b\uff0c\u5e76\u5b9e\u73b0\u4e86\u5f62\u5f0f\u5316\u9a8c\u8bc1\uff0c\u65e0\u9700\u989d\u5916\u7c7b\u578b\u7b49\u4ef7\u5047\u8bbe\u3002", "motivation": "\u5f53\u524dHaskell\u98ce\u683c\u7684\u91cd\u8f7d\u8bed\u4e49\u5728\u8868\u8fbe\u80fd\u529b\u548c\u5f62\u5f0f\u5316\u65b9\u9762\u5b58\u5728\u5c40\u9650\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u7c7b\u578b\u7c7b\u9ad8\u7ea7\u7279\u6027\u65f6\uff0c\u73b0\u6709\u8bed\u4e49\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u7b49\u4ef7\u516c\u7406\u3002\u672c\u6587\u65e8\u5728\u63d0\u51fa\u4e00\u79cd\u66f4\u7edf\u4e00\u4e14\u5177\u5907\u66f4\u5f3a\u8868\u8fbe\u80fd\u529b\u7684\u91cd\u8f7d\u8bed\u4e49\u3002", "method": "\u4f5c\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u6838\u5fc3\u8bed\u8a00System F$_\\mathrm{D}$\uff0c\u8be5\u8bed\u8a00\u901a\u8fc7\u96c6\u5408\u6027\u7684\u5b9e\u4f8b\uff08\u800c\u975e\u5355\u4e00\u5b9a\u4e49\uff09\u6765\u8868\u8fbe\u5f00\u653e\u6570\u636e\u7c7b\u578b\u548c\u5f00\u653e\u51fd\u6570\uff0c\u5e76\u5728Lean4\u5b9a\u7406\u8bc1\u660e\u5668\u4e2d\u5f62\u5f0f\u5316\u4e86\u5176\u5143\u7406\u8bba\u3002", "result": "System F$_\\mathrm{D}$\u80fd\u591f\u66f4\u4e3a\u7075\u6d3b\u548c\u8868\u8fbe\u6027\u5f3a\u5730\u7f16\u7801Haskell\u7c7b\u578b\u7c7b\u7cfb\u7edf\u4e2d\u7684\u9ad8\u7ea7\u7279\u6027\uff0c\u5e76\u4e14\u65e0\u9700\u5047\u8bbe\u989d\u5916\u7684\u7c7b\u578b\u7b49\u4ef7\u516c\u7406\u3002", "conclusion": "\u63d0\u51fa\u7684System F$_\\mathrm{D}$\u4e3aHaskell\u98ce\u683c\u91cd\u8f7d\u548c\u7c7b\u578b\u7c7b\u7cfb\u7edf\u63d0\u4f9b\u4e86\u66f4\u7edf\u4e00\u4e14\u8868\u8fbe\u80fd\u529b\u66f4\u5f3a\u7684\u8bed\u4e49\u57fa\u7840\uff0c\u5bf9\u76f8\u5173\u529f\u80fd\u7684\u5f62\u5f0f\u5316\u673a\u5236\u6709\u79ef\u6781\u63a8\u52a8\u3002"}}
{"id": "2507.15864", "categories": ["cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.15864", "abs": "https://arxiv.org/abs/2507.15864", "authors": ["Guowen Yuan", "Tien-Hsuan Wu", "Lianghao Xia", "Ben Kao"], "title": "Adversarial Demonstration Learning for Low-resource NER Using Dual Similarity", "comment": null, "summary": "We study the problem of named entity recognition (NER) based on demonstration\nlearning in low-resource scenarios. We identify two issues in demonstration\nconstruction and model training. Firstly, existing methods for selecting\ndemonstration examples primarily rely on semantic similarity; We show that\nfeature similarity can provide significant performance improvement. Secondly,\nwe show that the NER tagger's ability to reference demonstration examples is\ngenerally inadequate. We propose a demonstration and training approach that\neffectively addresses these issues. For the first issue, we propose to select\nexamples by dual similarity, which comprises both semantic similarity and\nfeature similarity. For the second issue, we propose to train an NER model with\nadversarial demonstration such that the model is forced to refer to the\ndemonstrations when performing the tagging task. We conduct comprehensive\nexperiments in low-resource NER tasks, and the results demonstrate that our\nmethod outperforms a range of methods.", "AI": {"tldr": "\u672c\u6587\u9488\u5bf9\u4f4e\u8d44\u6e90\u4e0b\u7684NER\u4efb\u52a1\uff0c\u63d0\u51fa\u901a\u8fc7\u201c\u53cc\u91cd\u76f8\u4f3c\u5ea6\u201d\u9009\u62e9\u793a\u4f8b\u53ca\u201c\u5bf9\u6297\u793a\u4f8b\u8bad\u7ec3\u201d\u65b9\u6cd5\uff0c\u6709\u6548\u63d0\u5347\u6a21\u578b\u6548\u679c\uff0c\u5b9e\u9a8c\u4f18\u4e8e\u591a\u79cd\u5df2\u6709\u65b9\u6cd5\u3002", "motivation": "\u5728\u4f4e\u8d44\u6e90\u573a\u666f\u4e0b\uff0c\u5229\u7528\u793a\u4f8b\u5b66\u4e60\u63d0\u5347\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08NER\uff09\u6548\u679c\u5b58\u5728\u6311\u6218\u3002\u4f5c\u8005\u53d1\u73b0\u76ee\u524d\u7684\u793a\u4f8b\u9009\u62e9\u4e3b\u8981\u4f9d\u8d56\u8bed\u4e49\u76f8\u4f3c\u5ea6\uff0c\u5e76\u4e14NER\u6a21\u578b\u5bf9\u793a\u4f8b\u7684\u53c2\u8003\u80fd\u529b\u4e0d\u8db3\u3002", "method": "\u63d0\u51fa\u201c\u53cc\u91cd\u76f8\u4f3c\u5ea6\u201d\u793a\u4f8b\u9009\u62e9\u65b9\u6cd5\uff08\u7ed3\u5408\u8bed\u4e49\u548c\u7279\u5f81\u76f8\u4f3c\u5ea6\uff09\uff0c\u4ee5\u53ca\u5bf9\u6297\u793a\u4f8b\u8bad\u7ec3\u7b56\u7565\uff0c\u5f3a\u5236\u6a21\u578b\u5728NER\u4efb\u52a1\u4e2d\u6709\u6548\u5229\u7528\u793a\u4f8b\u3002", "result": "\u5728\u591a\u4e2a\u4f4e\u8d44\u6e90NER\u4efb\u52a1\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u6240\u63d0\u65b9\u6cd5\u4f18\u4e8e\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\u3002", "conclusion": "\u901a\u8fc7\u6539\u8fdb\u793a\u4f8b\u9009\u62e9\u4e0e\u5f15\u5165\u5bf9\u6297\u6027\u8bad\u7ec3\uff0c\u4f7fNER\u6a21\u578b\u5728\u4f4e\u8d44\u6e90\u573a\u666f\u4e0b\u66f4\u597d\u5730\u5229\u7528\u6f14\u793a\u793a\u4f8b\uff0c\u663e\u8457\u63d0\u5347\u8bc6\u522b\u6548\u679c\u3002"}}
{"id": "2507.15892", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.15892", "abs": "https://arxiv.org/abs/2507.15892", "authors": ["Elijah Nnorom", "Md Basim Uddin Ahmed", "Jiho Shin", "Hung Viet Pham", "Song Wang"], "title": "StaAgent: An Agentic Framework for Testing Static Analyzers", "comment": null, "summary": "Static analyzers play a critical role in identifying bugs early in the\nsoftware development lifecycle, but their rule implementations are often\nunder-tested and prone to inconsistencies. To address this, we propose\nStaAgent, an agentic framework that harnesses the generative capabilities of\nLarge Language Models (LLMs) to systematically evaluate static analyzer rules.\nStaAgent comprises four specialized agents: a Seed Generation Agent that\ntranslates bug detection rules into concrete, bug-inducing seed programs; a\nCode Validation Agent that ensures the correctness of these seeds; a Mutation\nGeneration Agent that produces semantically equivalent mutants; and an Analyzer\nEvaluation Agent that performs metamorphic testing by comparing the static\nanalyzer's behavior on seeds and their corresponding mutants. By revealing\ninconsistent behaviors, StaAgent helps uncover flaws in rule implementations.\nThis LLM-driven, multi-agent framework offers a scalable and adaptable solution\nto improve the reliability of static analyzers. We evaluated StaAgent with five\nstate-of-the-art LLMs (CodeL-lama, DeepSeek, Codestral, Qwen, and GPT-4o)\nacross five widely used static analyzers (SpotBugs, SonarQube, ErrorProne,\nInfer, and PMD). The experimental results show that our approach can help\nreveal 64 problematic rules in the latest versions of these five static\nanalyzers (i.e., 28 in SpotBugs, 18 in SonarQube, 6 in ErrorProne, 4 in Infer,\nand 8 in PMD). In addition, 53 out of the 64 bugs cannot be detected by the\nSOTA baseline. We have reported all the bugs to developers, with two of them\nalready fixed. Three more have been confirmed by developers, while the rest are\nawaiting response. These results demonstrate the effectiveness of our approach\nand underscore the promise of agentic, LLM-driven data synthesis to advance\nsoftware engineering.", "AI": {"tldr": "\u672c\u6587\u63d0\u51faStaAgent\uff0c\u4e00\u4e2a\u5229\u7528LLM\u9a71\u52a8\u3001\u9762\u5411\u667a\u80fd\u4f53\u7684\u9759\u6001\u5206\u6790\u5668\u89c4\u5219\u7f3a\u9677\u68c0\u6d4b\u6846\u67b6\u3002\u901a\u8fc7\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u4ee3\u7801\u4e0e\u53d8\u5f02\u4f53\u5e76\u8fdb\u884c\u884c\u4e3a\u6bd4\u5bf9\uff0c\u6709\u6548\u53d1\u73b0\u4e3b\u6d41\u5206\u6790\u5668\u4e2d\u7684\u9690\u853d\u95ee\u9898\uff0c\u5b9e\u73b0\u4e86\u6bd4\u4f20\u7edf\u65b9\u6cd5\u66f4\u9ad8\u7684\u8986\u76d6\u548c\u7f3a\u9677\u53d1\u73b0\u80fd\u529b\u3002", "motivation": "\u9759\u6001\u5206\u6790\u5de5\u5177\u5bf9\u68c0\u6d4b\u8f6f\u4ef6\u5f00\u53d1\u65e9\u671f\u7684bug\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5176\u89c4\u5219\u5b9e\u73b0\u5e38\u5b58\u5728\u6d4b\u8bd5\u4e0d\u8db3\u548c\u4e0d\u4e00\u81f4\u6027\u95ee\u9898\uff0c\u5f71\u54cd\u4e86\u5de5\u5177\u7684\u53ef\u9760\u6027\u3002", "method": "\u63d0\u51faStaAgent\u6846\u67b6\uff0c\u7ed3\u5408\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u7684\u751f\u6210\u80fd\u529b\uff0c\u901a\u8fc7\u56db\u4e2a\u4e13\u7528\u667a\u80fd\u4f53\u81ea\u52a8\u5316\u5730\u8bc4\u4f30\u9759\u6001\u5206\u6790\u5668\u7684\u89c4\u5219\uff1a1. \u79cd\u5b50\u751f\u6210Agent\u751f\u6210\u5177\u4f53\u73b0bug\u7684\u6d4b\u8bd5\u4ee3\u7801\uff1b2. \u4ee3\u7801\u9a8c\u8bc1Agent\u9a8c\u8bc1\u79cd\u5b50\u7684\u6b63\u786e\u6027\uff1b3. \u53d8\u5f02\u751f\u6210Agent\u4ea7\u751f\u7b49\u4ef7\u53d8\u5f02\u4f53\uff1b4. \u5206\u6790\u5668\u8bc4\u4f30Agent\u901a\u8fc7\u6bd4\u8f83\u5206\u6790\u5668\u5bf9\u79cd\u5b50\u4e0e\u53d8\u5f02\u4f53\u7684\u5904\u7406\uff0c\u8fdb\u884c\u53d8\u5f62\u6d4b\u8bd5\uff0c\u4ece\u800c\u53d1\u73b0\u89c4\u5219\u5b9e\u73b0\u4e2d\u7684\u7f3a\u9677\u3002", "result": "\u5728\u4e94\u6b3e\u4e3b\u6d41LLM\u4e0e\u4e94\u4e2a\u5e38\u7528\u9759\u6001\u5206\u6790\u5668\u4e0a\u7684\u5b9e\u9a8c\u663e\u793a\uff0c\u8be5\u65b9\u6cd5\u63ed\u793a\u4e8664\u4e2a\u95ee\u9898\u89c4\u5219\uff0c\u5176\u4e2d53\u4e2a\u65e0\u6cd5\u88ab\u73b0\u6709\u6700\u4f18\u65b9\u6cd5\u68c0\u6d4b\u3002\u90e8\u5206\u95ee\u9898\u5df2\u88ab\u5f00\u6e90\u793e\u533a\u4fee\u590d\u6216\u786e\u8ba4\u3002", "conclusion": "StaAgent\u5c55\u73b0\u4e86\u57fa\u4e8eLLM\u7684\u591aAgent\u6846\u67b6\u5728\u66b4\u9732\u9759\u6001\u5206\u6790\u5668\u5b9e\u73b0\u7f3a\u9677\u4e0a\u7684\u6709\u6548\u6027\uff0c\u5e76\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u6570\u636e\u5408\u6210\u4e0e\u81ea\u52a8\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u53ef\u6269\u5c55\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.16089", "categories": ["cs.PL", "cs.DB"], "pdf": "https://arxiv.org/pdf/2507.16089", "abs": "https://arxiv.org/abs/2507.16089", "authors": ["Michael J. Sullivan", "Zhibo Chen", "Elvis Pranskevichus", "Robert J. Simmons", "Victor Petrovykh", "Alja\u017e Mur Er\u017een", "Yury Selivanov"], "title": "Querying Graph-Relational Data", "comment": null, "summary": "For applications that store structured data in relational databases, there is\nan impedance mismatch between the flat representations encouraged by relational\ndata models and the deeply nested information that applications expect to\nreceive. In this work, we present the graph-relational database model, which\nprovides a flexible, compositional, and strongly-typed solution to this\n\"object-relational mismatch.\" We formally define the graph-relational database\nmodel and present a static and dynamic semantics for queries. In addition, we\ndiscuss the realization of the graph-relational database model in EdgeQL, a\ngeneral-purpose SQL-style query language, and the Gel system, which compiles\nEdgeQL schemas and queries into PostgreSQL queries. Gel facilitates the kind of\nobject-shaped data manipulation that is frequently provided inefficiently by\nobject-relational mapping (ORM) technologies, while achieving most of the\nefficiency that comes from require writing complex PostgreSQL queries directly.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fagraph-relational\u6570\u636e\u5e93\u6a21\u578b\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u5173\u7cfb\u6570\u636e\u5e93\u4e0e\u5bf9\u8c61\u6a21\u578b\u95f4\u7684\u6570\u636e\u7ed3\u6784\u4e0d\u5339\u914d\u95ee\u9898\uff0c\u5e76\u901a\u8fc7EdgeQL\u4e0eGel\u7cfb\u7edf\u5b9e\u73b0\uff0c\u9ad8\u6548\u652f\u6301\u590d\u6742\u6570\u636e\u8bbf\u95ee\uff0c\u517c\u987e\u6613\u7528\u6027\u4e0e\u6027\u80fd\u3002", "motivation": "\u5173\u7cfb\u578b\u6570\u636e\u5e93\u867d\u7136\u6613\u4e8e\u5b58\u50a8\u7ed3\u6784\u5316\u6570\u636e\uff0c\u4f46\u5176\u201c\u6241\u5e73\u5316\u201d\u6a21\u5f0f\u4e0e\u5e94\u7528\u7a0b\u5e8f\u9884\u671f\u83b7\u53d6\u7684\u6df1\u5ea6\u5d4c\u5957\u4fe1\u606f\u4e4b\u95f4\u5b58\u5728\u4e0d\u5339\u914d\uff08\u5373\u5bf9\u8c61-\u5173\u7cfb\u963b\u6297\u4e0d\u5339\u914d\u95ee\u9898\uff09\u3002", "method": "\u63d0\u51fa\u4e86graph-relational\u6570\u636e\u5e93\u6a21\u578b\uff0c\u5e76\u5bf9\u5176\u67e5\u8be2\u7684\u9759\u6001\u548c\u52a8\u6001\u8bed\u4e49\u8fdb\u884c\u4e86\u5f62\u5f0f\u5316\u5b9a\u4e49\u3002\u6b64\u5916\uff0c\u5c06\u8be5\u6a21\u578b\u843d\u5730\u5230EdgeQL\u67e5\u8be2\u8bed\u8a00\u548cGel\u7cfb\u7edf\uff0c\u540e\u8005\u53ef\u5c06EdgeQL\u7f16\u8bd1\u4e3aPostgreSQL\u67e5\u8be2\u3002", "result": "Gel\u7cfb\u7edf\u80fd\u591f\u9ad8\u6548\u652f\u6301\u5bf9\u8c61\u5f62\u6001\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u5927\u5927\u63d0\u5347\u4e86\u73b0\u6709ORM\u65b9\u6cd5\u7684\u6548\u7387\uff0c\u5e76\u51cf\u5c11\u4e86\u624b\u52a8\u7f16\u5199\u590d\u6742SQL\u7684\u9700\u6c42\u3002", "conclusion": "graph-relational\u6570\u636e\u5e93\u6a21\u578b\u80fd\u9ad8\u6548\u3001\u7075\u6d3b\u5e76\u5f3a\u7c7b\u578b\u5730\u89e3\u51b3\u5bf9\u8c61-\u5173\u7cfb\u963b\u6297\u4e0d\u5339\u914d\u95ee\u9898\uff0c\u5e76\u901a\u8fc7EdgeQL\u548cGel\u7cfb\u7edf\u5b9e\u73b0\u843d\u5730\uff0c\u7ed3\u5408\u4e86ORM\u7684\u6613\u7528\u6027\u548c\u624b\u5199SQL\u7684\u9ad8\u6548\u6027\u3002"}}
{"id": "2507.15868", "categories": ["cs.CL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.15868", "abs": "https://arxiv.org/abs/2507.15868", "authors": ["Altynbek Ismailov", "Salia Asanova"], "title": "Small Edits, Big Consequences: Telling Good from Bad Robustness in Large Language Models", "comment": null, "summary": "Large language models (LLMs) now write code in settings where misreading a\nsingle word can break safety or cost money, yet we still expect them to\noverlook stray typos. To probe where useful robustness ends and harmful\ninsensitivity begins, we compile 50 LeetCode problems and craft three minimal\nprompt perturbations that should vary in importance: (i) progressive\nunderspecification deleting 10 % of words per step; (ii) lexical flip swapping\na pivotal quantifier (\"max\" to \"min\"); and (iii) jargon inflation replacing a\ncommon noun with an obscure technical synonym. Six frontier models, including\nthree \"reasoning-tuned\" versions, solve each mutated prompt, and their Python\noutputs are checked against the original test suites to reveal whether they\nreused the baseline solution or adapted. Among 11 853 generations we observe a\nsharp double asymmetry. Models remain correct in 85 % of cases even after 90 %\nof the prompt is missing, showing over-robustness to underspecification, yet\nonly 54 % react to a single quantifier flip that reverses the task, with\nreasoning-tuned variants even less sensitive than their bases. Jargon edits lie\nin between, passing through 56 %. Current LLMs thus blur the line between\nharmless noise and meaning - changing edits, often treating both as ignorable.\nMasking salient anchors such as function names can force re - evaluation. We\nadvocate evaluation and training protocols that reward differential\nsensitivity: stay steady under benign noise but adapt - or refuse - when\nsemantics truly change.", "AI": {"tldr": "\u672c\u6587\u7cfb\u7edf\u5206\u6790LLM\u5bf9\u63d0\u793a\u8bcd\u5fae\u5c0f\u53d8\u52a8\u7684\u9c81\u68d2\u6027\u4e0e\u654f\u611f\u7a0b\u5ea6\uff0c\u53d1\u73b0\u6a21\u578b\u5bf9\u90e8\u5206\u8bed\u4e49\u5173\u952e\u53d8\u52a8\u7f3a\u4e4f\u54cd\u5e94\uff0c\u5f3a\u8c03\u4e9f\u9700\u4f18\u5316\u6a21\u578b\u5bf9\u8bed\u4e49\u53d8\u5316\u7684\u5206\u8fa8\u80fd\u529b\u548c\u5dee\u5f02\u5316\u54cd\u5e94\u3002", "motivation": "\u5927\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u4ee3\u7801\u751f\u6210\u7b49\u5173\u952e\u573a\u666f\u4e0b\u4f7f\u7528\uff0c\u4f46\u9762\u5bf9\u63d0\u793a\u4e2d\u7684\u5c0f\u53d8\u52a8\uff08\u5982\u62fc\u5199\u9519\u8bef\u6216\u672f\u8bed\u66ff\u6362\uff09\uff0c\u6a21\u578b\u8868\u73b0\u5982\u4f55\u5c1a\u4e0d\u660e\u786e\u3002\u7814\u7a76\u52a8\u673a\u662f\u63a2\u7a76\u6a21\u578b\u5728\u65e0\u5bb3\u566a\u58f0\u4e0e\u6839\u672c\u6027\u8bed\u4e49\u53d8\u5316\u4e4b\u95f4\u7684\u654f\u611f\u5ea6\u8fb9\u754c\u3002", "method": "\u4f5c\u8005\u6536\u96c6\u4e8650\u9053LeetCode\u9898\u76ee\uff0c\u5bf9\u6bcf\u9053\u9898\u76ee\u8bbe\u8ba1\u4e09\u79cd\u6700\u5c0f\u5316\u6270\u52a8\uff1a\uff08i\uff09\u9010\u6b65\u5220\u51cf\u6bcf\u6b6510%\u8bcd\u6c47\u7684\u63d0\u793a\uff0c\u6d4b\u8bd5\u6b20\u89c4\u8303\u9c81\u68d2\u6027\uff1b\uff08ii\uff09\u5173\u952e\u6570\u91cf\u8bcd\u66ff\u6362\uff08\u5982'max'\u53d8'min'\uff09\uff0c\u6d4b\u8bd5\u8bed\u4e49\u9006\u8f6c\u654f\u611f\u5ea6\uff1b\uff08iii\uff09\u901a\u4fd7\u8bcd\u6362\u4e3a\u6280\u672f\u672f\u8bed\uff0c\u6d4b\u8bd5\u672f\u8bed\u9c81\u68d2\u6027\u3002\u516d\u4e2a\u4e3b\u6d41\u6a21\u578b\uff08\u542b\u4e09\u79cd'\u63a8\u7406\u5fae\u8c03'\u7248\u672c\uff09\u5bf9\u6bcf\u79cd\u53d8\u4f53\u751f\u6210Python\u4ee3\u7801\uff0c\u5e76\u68c0\u9a8c\u8f93\u51fa\u662f\u5426\u968f\u63d0\u793a\u53d8\u66f4\u8c03\u6574\u3002", "result": "\u6a21\u578b\u5728\u5220\u966490%\u63d0\u793a\u5185\u5bb9\u540e\u4f9d\u7136\u670985%\u7684\u6b63\u786e\u7387\uff0c\u8868\u73b0\u51fa\u5bf9\u4e0d\u8db3\u89c4\u8303\u7684\u300e\u8fc7\u5ea6\u9c81\u68d2\u6027\u300f\u3002\u4f46\u5bf9\u5355\u4e00\u5173\u952e\u6570\u91cf\u8bcd\u53cd\u8f6c\uff0c\u4ec554%\u6a21\u578b\u6709\u53cd\u5e94\uff0c\u8bf4\u660e\u5bf9\u8bed\u4e49\u9006\u8f6c\u4e0d\u654f\u611f\uff0c\u63a8\u7406\u5fae\u8c03\u6a21\u578b\u654f\u611f\u5ea6\u66f4\u4f4e\u3002\u672f\u8bed\u6270\u52a8\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\uff0c\u4ec556%\u6709\u53cd\u5e94\u3002\u5c4f\u853d\u5173\u952e\u951a\u70b9\u5982\u51fd\u6570\u540d\u4f1a\u63d0\u5347\u6a21\u578b\u654f\u611f\u5ea6\u3002", "conclusion": "\u5f53\u524dLLM\u96be\u4ee5\u533a\u5206\u65e0\u5bb3\u566a\u58f0\u548c\u8bed\u4e49\u53d8\u5316\uff0c\u7ecf\u5e38\u5bf9\u4e8c\u8005\u4e00\u89c6\u540c\u4ec1\uff0c\u5bfc\u81f4\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5b58\u5728\u6f5c\u5728\u5b89\u5168/\u51c6\u786e\u6027\u98ce\u9669\u3002\u4f5c\u8005\u5efa\u8bae\u8bc4\u6d4b\u548c\u8bad\u7ec3\u65b9\u6cd5\u9700\u5956\u52b1\u201c\u5dee\u5f02\u654f\u611f\u6027\u201d\uff1a\u5728\u906d\u9047\u65e0\u5bb3\u566a\u58f0\u65f6\u9c81\u68d2\u3001\u4f46\u9047\u5230\u8bed\u4e49\u5927\u53d8\u5316\u65f6\u80fd\u9002\u5e94\u6216\u62d2\u7edd\u4f5c\u7b54\u3002"}}
{"id": "2507.16037", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.16037", "abs": "https://arxiv.org/abs/2507.16037", "authors": ["Zhili Zeng", "Kimya Khakzad Shahandashti", "Alvine Boaye Belle", "Song Wang", "Zhen Ming", "Jiang"], "title": "A Pilot Study on LLM-Based Agentic Translation from Android to iOS: Pitfalls and Insights", "comment": null, "summary": "The rapid advancement of mobile applications has led to a significant demand\nfor cross-platform compatibility, particularly between the Android and iOS\nplatforms. Traditional approaches to mobile application translation often rely\non manual intervention or rule-based systems, which are labor-intensive and\ntime-consuming. While recent advancements in machine learning have introduced\nautomated methods, they often lack contextual understanding and adaptability,\nresulting in suboptimal translations. Large Language Models (LLMs) were\nrecently leveraged to enhance code translation at different granularities,\nincluding the method, class, and repository levels. Researchers have\ninvestigated common errors, limitations, and potential strategies to improve\nthese tasks. However, LLM-based application translation across different\nplatforms, such as migrating mobile applications between Android and iOS or\nadapting software across diverse frameworks, remains underexplored.\nUnderstanding the performance, strengths, and limitations of LLMs in\ncross-platform application translation is critical for advancing software\nengineering automation. This study aims to fill this gap by evaluating\nLLM-based agentic approaches for mobile application translation, identifying\nkey failure points, and proposing guidelines to improve translation\nperformance. We developed a chain of agents that account for dependencies,\nspecifications, program structure, and program control flow when translating\napplications from Android to iOS. To evaluate the performance, we manually\nexamined the translated code for syntactic correctness, semantic accuracy, and\nfunctional completeness. For translation failures, we further conducted a\ndetailed root cause analysis to understand the underlying limitations of the\nagentic translation process and identify opportunities for improvement.", "AI": {"tldr": "\u672c\u6587\u8bc4\u4f30\u4e86LLM\u9a71\u52a8\u7684\u667a\u80fd\u4ee3\u7406\u94fe\u5728Android\u5230iOS\u5e94\u7528\u8fc1\u79fb\u4e2d\u7684\u6548\u679c\uff0c\u901a\u8fc7\u4eba\u5de5\u8bc4\u6d4b\u548c\u5931\u8d25\u5206\u6790\uff0c\u63d0\u51fa\u4e86\u5177\u4f53\u6539\u8fdb\u5efa\u8bae\uff0c\u4e3a\u81ea\u52a8\u5316\u8de8\u5e73\u53f0\u7ffb\u8bd1\u63d0\u4f9b\u4e86\u7406\u8bba\u4e0e\u5b9e\u8df5\u652f\u6301\u3002", "motivation": "\u968f\u7740\u79fb\u52a8\u5e94\u7528\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u5bf9\u8de8\u5e73\u53f0\u517c\u5bb9\u6027\u7684\u9700\u6c42\u6fc0\u589e\uff0c\u5c24\u5176\u662fAndroid\u548ciOS\u4e4b\u95f4\u3002\u7136\u800c\uff0c\u5f53\u524d\u7684\u5e94\u7528\u8fc1\u79fb\u65b9\u6cd5\u591a\u4e3a\u624b\u52a8\u6216\u89c4\u5219\u9a71\u52a8\uff0c\u6548\u7387\u4f4e\u4e14\u6613\u51fa\u9519\u3002\u867d\u7136\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u6709\u4e00\u5b9a\u8fdb\u5c55\uff0c\u4f46\u5bf9\u4e8e\u4e0a\u4e0b\u6587\u7406\u89e3\u548c\u81ea\u9002\u5e94\u6027\u4ecd\u6709\u4e0d\u8db3\u4e9f\u9700\u6539\u8fdb\u3002\u8fd1\u5e74\u6765\uff0c\u5927\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5f15\u5165\u4e86\u81ea\u52a8\u5316\u4ee3\u7801\u7ffb\u8bd1\uff0c\u4f46\u5176\u5728\u8de8\u5e73\u53f0\u5e94\u7528\uff08\u5982Android\u8f6ciOS\uff09\u7ffb\u8bd1\u9886\u57df\u7814\u7a76\u4ecd\u6709\u9650\u3002\u672c\u6587\u65e8\u5728\u5f25\u8865\u8be5\u9886\u57df\u7684\u7814\u7a76\u7a7a\u767d\u3002", "method": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eLLM\u7684\u667a\u80fd\u4ee3\u7406\u94fe\u65b9\u6cd5\uff0c\u5728Android\u5230iOS\u5e94\u7528\u8fc1\u79fb\u4e2d\u5145\u5206\u8003\u8651\u4f9d\u8d56\u5173\u7cfb\u3001\u89c4\u8303\u3001\u7a0b\u5e8f\u7ed3\u6784\u548c\u63a7\u5236\u6d41\u3002\u901a\u8fc7\u4eba\u5de5\u68c0\u67e5\u8bd1\u7801\u7684\u8bed\u6cd5\u6b63\u786e\u6027\u3001\u8bed\u4e49\u51c6\u786e\u6027\u548c\u529f\u80fd\u5b8c\u6574\u6027\u8fdb\u884c\u8bc4\u4f30\uff0c\u5e76\u5bf9\u7ffb\u8bd1\u5931\u8d25\u6848\u4f8b\u505a\u4e86\u7ec6\u81f4\u7684\u6839\u56e0\u5206\u6790\u3002", "result": "\u5b9e\u9a8c\u63ed\u793a\u4e86LLM\u667a\u80fd\u4ee3\u7406\u65b9\u6cd5\u5728\u79fb\u52a8\u5e94\u7528\u8de8\u5e73\u53f0\u8fc1\u79fb\u4e2d\u7684\u8868\u73b0\u3001\u4f18\u52bf\u53ca\u4e0d\u8db3\u3002\u5c24\u5176\u901a\u8fc7\u4eba\u5de5\u8bc4\u6d4b\u4e0e\u5931\u8d25\u6848\u4f8b\u5206\u6790\uff0c\u660e\u786e\u4e86\u65b9\u6cd5\u7684\u5173\u952e\u5931\u6548\u70b9\uff0c\u5e76\u63d0\u51fa\u4e86\u4f18\u5316\u5efa\u8bae\u3002", "conclusion": "LLM\u667a\u80fd\u4ee3\u7406\u65b9\u6cd5\u5728Android\u5230iOS\u5e94\u7528\u8fc1\u79fb\u4e2d\u8868\u73b0\u51fa\u4e00\u5b9a\u6f5c\u529b\uff0c\u4f46\u4ecd\u5b58\u5728\u5931\u8d25\u70b9\u548c\u5c40\u9650\uff0c\u9700\u8981\u9488\u5bf9\u4f9d\u8d56\u3001\u7ed3\u6784\u7b49\u65b9\u9762\u7ee7\u7eed\u4f18\u5316\u3002\u7814\u7a76\u4e3a\u672a\u6765\u8de8\u5e73\u53f0\u81ea\u52a8\u5316\u7ffb\u8bd1\u63d0\u4f9b\u4e86\u6539\u8fdb\u65b9\u5411\u548c\u53c2\u8003\u3002"}}
{"id": "2507.16660", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.16660", "abs": "https://arxiv.org/abs/2507.16660", "authors": ["Xuran Cai"], "title": "Enhancing Compiler Optimization Efficiency through Grammatical Decompositions of Control-Flow Graphs", "comment": null, "summary": "This thesis addresses the complexities of compiler optimizations, such as\nregister allocation and Lifetime-optimal Speculative Partial Redundancy\nElimination (LOSPRE), which are often handled using tree decomposition\nalgorithms. However, these methods frequently overlook important sparsity\naspects of Control Flow Graphs (CFGs) and result in high computational costs.\nWe introduce the SPL (Series-Parallel-Loop) decomposition, a novel framework\nthat offers optimal solutions to these challenges. A key contribution is the\nformulation of a general solution for Partial Constraint Satisfaction Problems\n(PCSPs) within graph structures, applied to three optimization problems. First,\nSPL decomposition enhances register allocation by accurately modeling variable\ninterference graphs, leading to efficient register assignments and improved\nperformance across benchmarks. Second, it optimizes LOSPRE by effectively\nidentifying and eliminating redundancies in program execution. Finally, the\nthesis focuses on optimizing the placement of bank selection instructions to\nenhance data retrieval efficiency and reduce latency. Extensive experimentation\ndemonstrates significant performance improvements over existing methods,\nestablishing SPL decomposition as a powerful tool for complex compiler\noptimizations, including register allocation, LOSPRE, and bank selection.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86SPL\u5206\u89e3\u6846\u67b6\uff0c\u6709\u6548\u63d0\u5347\u4e86\u5bc4\u5b58\u5668\u5206\u914d\u3001\u7a0b\u5e8f\u5197\u4f59\u6d88\u9664\u548c\u6570\u636e\u68c0\u7d22\u6548\u7387\uff0c\u76f8\u6bd4\u4f20\u7edf\u65b9\u6cd5\u5177\u6709\u663e\u8457\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u73b0\u6709\u7684\u7f16\u8bd1\u5668\u4f18\u5316\uff08\u5982\u5bc4\u5b58\u5668\u5206\u914d\u548c\u751f\u547d\u5468\u671f\u6700\u4f18\u7684\u6295\u673a\u90e8\u5206\u5197\u4f59\u6d88\u9664\uff09\u5e38\u7528\u6811\u5206\u89e3\u7b97\u6cd5\uff0c\u4f46\u8fd9\u4e9b\u65b9\u6cd5\u5e38\u5e38\u5ffd\u7565\u63a7\u5236\u6d41\u56fe\u7684\u7a00\u758f\u6027\uff0c\u5bfc\u81f4\u8ba1\u7b97\u4ee3\u4ef7\u9ad8\u6602\u3002", "method": "\u63d0\u51fa\u4e86SPL\uff08\u4e32-\u5e76-\u5faa\u73af\uff09\u5206\u89e3\u7684\u65b0\u6846\u67b6\uff0c\u5e76\u5efa\u7acb\u4e86\u56fe\u7ed3\u6784\u4e2d\u90e8\u5206\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\uff08PCSP\uff09\u7684\u901a\u7528\u89e3\u51b3\u65b9\u6848\u3002\u8be5\u65b9\u6cd5\u5206\u522b\u5e94\u7528\u4e8e\u4e09\u4e2a\u4f18\u5316\u95ee\u9898\u3002", "result": "SPL\u5206\u89e3\u901a\u8fc7\u66f4\u51c6\u786e\u5730\u5efa\u6a21\u53d8\u91cf\u5e72\u6270\u56fe\uff0c\u63d0\u9ad8\u4e86\u5bc4\u5b58\u5668\u5206\u914d\u6548\u7387\u548c\u7a0b\u5e8f\u6027\u80fd\u3002\u540c\u65f6\uff0c\u4f18\u5316\u4e86LOSPRE\uff0c\u4f7f\u7a0b\u5e8f\u6267\u884c\u4e2d\u7684\u5197\u4f59\u66f4\u6709\u6548\u5730\u88ab\u6d88\u9664\u3002\u53e6\u5916\u4f18\u5316\u4e86\u94f6\u884c\u9009\u62e9\u6307\u4ee4\u7684\u653e\u7f6e\uff0c\u63d0\u9ad8\u4e86\u6570\u636e\u68c0\u7d22\u6548\u7387\u5e76\u51cf\u5c11\u5ef6\u8fdf\u3002", "conclusion": "\u5b9e\u9a8c\u8868\u660e\uff0cSPL\u5206\u89e3\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\uff0c\u662f\u590d\u6742\u7f16\u8bd1\u5668\u4f18\u5316\uff08\u5305\u62ec\u5bc4\u5b58\u5668\u5206\u914d\u3001LOSPRE\u548c\u94f6\u884c\u9009\u62e9\uff09\u7684\u6709\u529b\u5de5\u5177\u3002"}}
{"id": "2507.16002", "categories": ["cs.CL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.16002", "abs": "https://arxiv.org/abs/2507.16002", "authors": ["Sumit Singh", "Rohit Mishra", "Uma Shanker Tiwary"], "title": "Enhancing Hindi NER in Low Context: A Comparative study of Transformer-based models with vs. without Retrieval Augmentation", "comment": null, "summary": "One major challenge in natural language processing is named entity\nrecognition (NER), which identifies and categorises named entities in textual\ninput. In order to improve NER, this study investigates a Hindi NER technique\nthat makes use of Hindi-specific pretrained encoders (MuRIL and XLM-R) and\nGenerative Models ( Llama-2-7B-chat-hf (Llama2-7B), Llama-2-70B-chat-hf\n(Llama2-70B), Llama-3-70B-Instruct (Llama3-70B) and GPT3.5-turbo), and augments\nthe data with retrieved data from external relevant contexts, notably from\nWikipedia. We have fine-tuned MuRIL, XLM-R and Llama2-7B with and without RA.\nHowever, Llama2-70B, lama3-70B and GPT3.5-turbo are utilised for few-shot NER\ngeneration. Our investigation shows that the mentioned language models (LMs)\nwith Retrieval Augmentation (RA) outperform baseline methods that don't\nincorporate RA in most cases. The macro F1 scores for MuRIL and XLM-R are 0.69\nand 0.495, respectively, without RA and increase to 0.70 and 0.71,\nrespectively, in the presence of RA. Fine-tuned Llama2-7B outperforms Llama2-7B\nby a significant margin. On the other hand the generative models which are not\nfine-tuned also perform better with augmented data. GPT3.5-turbo adopted RA\nwell; however, Llama2-70B and llama3-70B did not adopt RA with our retrieval\ncontext. The findings show that RA significantly improves performance,\nespecially for low-context data. This study adds significant knowledge about\nhow best to use data augmentation methods and pretrained models to enhance NER\nperformance, particularly in languages with limited resources.", "AI": {"tldr": "\u672c\u7814\u7a76\u901a\u8fc7\u7ed3\u5408\u5916\u90e8\u68c0\u7d22\u589e\u5f3a\u7684\u6570\u636e\u4e0e\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u6709\u6548\u63d0\u5347\u4e86\u5370\u5730\u8bedNER\u8868\u73b0\uff0c\u7279\u522b\u662f\u5728\u4f4e\u8d44\u6e90\u6216\u4f4e\u4e0a\u4e0b\u6587\u573a\u666f\u4e0b\uff0c\u8868\u660eRA\u65b9\u6cd5\u5728NER\u4efb\u52a1\u4e0a\u6781\u5177\u4ef7\u503c\u3002", "motivation": "\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08NER\uff09\u662f\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\u7684\u4e00\u9879\u4e3b\u8981\u6311\u6218\uff0c\u5c24\u5176\u662f\u5728\u8d44\u6e90\u6709\u9650\u7684\u5370\u5730\u8bed\u7b49\u8bed\u8a00\u4e2d\u3002\u672c\u7814\u7a76\u65e8\u5728\u901a\u8fc7\u6570\u636e\u589e\u5f3a\u548c\u9884\u8bad\u7ec3\u6a21\u578b\u6539\u5584\u5370\u5730\u8bedNER\u7684\u6548\u679c\u3002", "method": "\u91c7\u7528\u4e86\u4e24\u7c7b\u65b9\u6cd5\uff1a1\uff09\u5bf9MuRIL\u3001XLM-R\u548cLlama2-7B\u8fd9\u4e09\u4e2a\u5370\u5730\u8bed\u76f8\u5173\u7684\u9884\u8bad\u7ec3\u7f16\u7801\u5668\u8fdb\u884c\u6709\u65e0\u68c0\u7d22\u589e\u5f3a\uff08RA\uff09\u7684\u5fae\u8c03\uff1b2\uff09\u5728\u5c11\u6837\u672c\u8bbe\u7f6e\u4e0b\uff0c\u4f7f\u7528Llama2-70B\u3001Llama3-70B\u548cGPT3.5-turbo\u7b49\u751f\u6210\u5f0f\u5927\u6a21\u578b\u505aNER\u4efb\u52a1\uff0c\u5e76\u8bc4\u4f30RA\u7684\u4f5c\u7528\u3002RA\u901a\u8fc7\u4ece\u5916\u90e8\u4e0a\u4e0b\u6587\uff08\u4e3b\u8981\u662f\u7ef4\u57fa\u767e\u79d1\uff09\u68c0\u7d22\u76f8\u5173\u6570\u636e\u5e76\u8fdb\u884c\u589e\u5f3a\u3002", "result": "\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7ed3\u5408\u68c0\u7d22\u589e\u5f3a\u7684\u6570\u636e\u4f1a\u660e\u663e\u4f18\u4e8e\u672a\u91c7\u7528RA\u7684\u57fa\u7ebf\u65b9\u6cd5\u3002\u5177\u4f53\u800c\u8a00\uff0cMuRIL\u548cXLM-R\u7684\u5b8fF1\u5206\u6570\u5206\u522b\u4ece0.69\u30010.495\uff08\u65e0RA\uff09\u63d0\u9ad8\u52300.70\u548c0.71\uff08\u6709RA\uff09\u3002\u5fae\u8c03\u540e\u7684Llama2-7B\u4e5f\u53d6\u5f97\u4e86\u663e\u8457\u63d0\u5347\u3002\u672a\u5fae\u8c03\u7684\u751f\u6210\u5f0f\u6a21\u578b\uff0c\u5728\u589e\u5f3a\u6570\u636e\u7684\u5e2e\u52a9\u4e0b\u4e5f\u8868\u73b0\u66f4\u4f73\u3002GPT3.5-turbo\u6210\u529f\u9002\u5e94\u4e86RA\uff0c\u800cLlama2-70B\u548cLlama3-70B\u5728\u8be5\u68c0\u7d22\u4e0a\u4e0b\u6587\u4e0b\u8868\u73b0\u4e00\u822c\u3002", "conclusion": "\u68c0\u7d22\u589e\u5f3a\uff08RA\uff09\u5bf9\u4e8eNER\u4efb\u52a1\u7684\u63d0\u5347\u4f5c\u7528\u663e\u8457\uff0c\u5c24\u5176\u5728\u4f4e\u4e0a\u4e0b\u6587\u60c5\u51b5\u4e0b\u6548\u679c\u66f4\u597d\u3002\u5408\u7406\u5229\u7528\u6570\u636e\u589e\u5f3a\u548c\u5927\u89c4\u6a21\u9884\u8bad\u7ec3\u6a21\u578b\u662f\u63d0\u5347\u4f4e\u8d44\u6e90\u8bed\u8a00NER\u6027\u80fd\u7684\u6709\u6548\u65b9\u6cd5\uff0c\u5bf9\u540e\u7eed\u76f8\u5173\u7814\u7a76\u63d0\u4f9b\u4e86\u91cd\u8981\u53c2\u8003\u3002"}}
{"id": "2507.16044", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.16044", "abs": "https://arxiv.org/abs/2507.16044", "authors": ["Meriem Mastouri", "Emna Ksontini", "Wael Kessentini"], "title": "Making REST APIs Agent-Ready: From OpenAPI to Model Context Protocol Servers for Tool-Augmented LLMs", "comment": null, "summary": "Large Language Models (LLMs) are evolving from passive text generators into\nactive agents that invoke external tools. To support this shift, scalable\nprotocols for tool integration are essential. The Model Context Protocol (MCP),\nintroduced by Anthropic in 2024, offers a schema-driven standard for dynamic\ntool discovery and invocation. Yet, building MCP servers remains manual and\nrepetitive, requiring developers to write glue code, handle authentication, and\nconfigure schemas by hand-replicating much of the integration effort MCP aims\nto eliminate.\n  This paper investigates whether MCP server construction can be meaningfully\nautomated. We begin by analyzing adoption trends: among 22,000+ MCP-tagged\nGitHub repositories created within six months of release, fewer than 5% include\nservers, typically small, single-maintainer projects dominated by repetitive\nscaffolding. To address this gap, we present AutoMCP, a compiler that generates\nMCP servers from OpenAPI 2.0/3.0 specifications. AutoMCP parses REST API\ndefinitions and produces complete server implementations, including schema\nregistration and authentication handling.\n  We evaluate AutoMCP on 50 real-world APIs spanning 5,066 endpoints across\nover 10 domains. From a stratified sample of 1,023 tool calls, 76.5% succeeded\nout of the box. Manual failure analysis revealed five recurring issues, all\nattributable to inconsistencies or omissions in the OpenAPI contracts. After\nminor fixes, averaging 19 lines of spec changes per API, AutoMCP achieved 99.9%\nsuccess.\n  Our findings (i) analyze MCP adoption and quantify the cost of manual server\ndevelopment, (ii) demonstrate that OpenAPI specifications, despite quality\nissues, enable near-complete MCP server automation, and (iii) contribute a\ncorpus of 5,066 callable tools along with insights on repairing common\nspecification flaws.", "AI": {"tldr": "\u63d0\u51faAutoMCP\u5de5\u5177\uff0c\u901a\u8fc7OpenAPI\u89c4\u8303\u81ea\u52a8\u751f\u6210MCP\u670d\u52a1\u5668\uff0c\u5927\u5e45\u7b80\u5316\u5f00\u53d1\u6d41\u7a0b\u3002\u5b9e\u9a8c\u8986\u76d650\u4e2a\u771f\u5b9eAPI\u30015,066\u7aef\u70b9\uff0c\u521d\u6b21\u81ea\u52a8\u5316\u6210\u529f\u738776.5%\uff0c\u7ecf\u5c0f\u4fee\u6b63\u8fbe99.9%\u3002\u5206\u6790\u603b\u7ed3\u4e86MCP\u5e94\u7528\u73b0\u72b6\u3001\u81ea\u52a8\u5316\u74f6\u9888\u53caOpenAPI\u89c4\u8303\u5e38\u89c1\u95ee\u9898\u3002", "motivation": "LLMs\u6b63\u4ece\u88ab\u52a8\u7684\u6587\u672c\u751f\u6210\u8f6c\u5411\u4e3b\u52a8\u4ee3\u7406\uff0c\u9700\u8981\u52a8\u6001\u8c03\u7528\u5916\u90e8\u5de5\u5177\u3002Anthropic\u63d0\u51fa\u7684MCP\uff08Model Context Protocol\uff09\u867d\u7136\u4e3a\u5de5\u5177\u96c6\u6210\u63d0\u4f9b\u4e86\u6807\u51c6\uff0c\u4f46\u5b9e\u9645\u6784\u5efaMCP\u670d\u52a1\u5668\u8fc7\u7a0b\u7e41\u7410\u3001\u91cd\u590d\u6027\u9ad8\uff0c\u963b\u788d\u4e86\u534f\u8bae\u7684\u5e7f\u6cdb\u5e94\u7528\u3002\u7814\u7a76\u52a8\u56e0\u5728\u4e8e\u63a2\u7d22\u5982\u4f55\u7b80\u5316\u548c\u81ea\u52a8\u5316MCP\u670d\u52a1\u5668\u7684\u5f00\u53d1\u8fc7\u7a0b\u3002", "method": "\u672c\u6587\u9996\u5148\u901a\u8fc7\u5bf922,000\u4f59\u4e2aMCP-tagged GitHub\u9879\u76ee\u7684\u5206\u6790\uff0c\u7814\u7a76\u624b\u5199MCP\u670d\u52a1\u5668\u5e26\u6765\u7684\u91cd\u590d\u6027\u52b3\u52a8\u53ca\u4f4e\u91c7\u7eb3\u7387\u3002\u63a5\u7740\u63d0\u51faAutoMCP\u2014\u2014\u4e00\u4e2a\u80fd\u591f\u5c06OpenAPI 2.0/3.0\u89c4\u8303\u7f16\u8bd1\u4e3a\u5b8c\u6574MCP\u670d\u52a1\u5668\u7684\u5de5\u5177\uff0c\u5e76\u5728\u8de810\u4e2a\u9886\u57df\u300150\u4e2a\u771f\u5b9eAPI\u30015,066\u4e2a\u63a5\u53e3\u4e0a\u8fdb\u884c\u5b9e\u9a8c\u9a8c\u8bc1\u3002\u901a\u8fc7\u62bd\u68371,023\u4e2aAPI\u8c03\u7528\uff0c\u7edf\u8ba1\u6210\u529f\u7387\u3001\u5f52\u56e0\u5931\u8d25\u7c7b\u578b\uff0c\u5e76\u8bc4\u4f30\u5c0f\u89c4\u6a21\u89c4\u8303\u4fee\u590d\u5bf9\u81ea\u52a8\u5316\u6548\u679c\u7684\u63d0\u5347\u3002", "result": "AutoMCP\u81ea\u52a8\u751f\u6210\u7684\u670d\u52a1\u5668\u5b9e\u73b0\u8986\u76d6\u4e86API\u5b9a\u4e49\u3001\u67b6\u6784\u6ce8\u518c\u3001\u9274\u6743\u7b49\u529f\u80fd\uff0c\u5f00\u7bb1\u5373\u7528\u6210\u529f\u7387\u4e3a76.5%\u3002\u4e3b\u8981\u5931\u8d25\u539f\u56e0\u662fOpenAPI\u89c4\u8303\u4e2d\u7684\u4e0d\u4e00\u81f4\u6216\u9057\u6f0f\u3002\u8fdb\u884c\u5c0f\u5e45\u5ea6\u89c4\u8303\u4fee\u6b63\uff08\u5e73\u574719\u884c/\u89c4\u8303\uff09\u540e\uff0c\u6210\u529f\u7387\u63d0\u5347\u81f399.9%\u3002\u5f52\u7eb3\u6574\u7406\u4e86\u5e38\u89c1OpenAPI\u7f3a\u9677\u7c7b\u578b\uff0c\u4e3a\u672a\u6765\u6807\u51c6\u5316\u63d0\u4f9b\u53c2\u8003\u3002", "conclusion": "\uff08i\uff09\u5168\u9762\u5206\u6790\u4e86MCP\u7684\u5b9e\u9645\u5e94\u7528\u53ca\u4eba\u5de5\u5f00\u53d1\u7684\u9ad8\u6210\u672c\uff1b\uff08ii\uff09\u8bc1\u660eOpenAPI\u51e0\u4e4e\u53ef\u4ee5\u5b8c\u5168\u81ea\u52a8\u5316MCP\u670d\u52a1\u7aef\u5f00\u53d1\uff08\u7ecf\u5c11\u91cf\u4fee\u6b63\uff09\uff1b\uff08iii\uff09\u8d21\u732e\u4e865,066\u4e2a\u53ef\u8c03\u7528\u5de5\u5177\u96c6\u4e0eAPI\u4fee\u590d\u7ecf\u9a8c\uff0c\u4e3a\u5de5\u5177\u751f\u6001\u53d1\u5c55\u4e0e\u6807\u51c6\u6539\u8fdb\u63d0\u4f9b\u6570\u636e\u57fa\u7840\u4e0e\u5b9e\u8df5\u5efa\u8bae\u3002"}}
