{"id": "2510.09726", "categories": ["cs.PL", "cs.AI", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.09726", "abs": "https://arxiv.org/abs/2510.09726", "authors": ["Tilman Hinnerichs", "Reuben Gardos Reid", "Jaap de Jong", "Bart Swinkels", "Pamela Wochner", "Nicolae Filat", "Tudor Magurescu", "Issa Hanou", "Sebastijan Dumancic"], "title": "Herb.jl: A Unifying Program Synthesis Library", "comment": null, "summary": "Program synthesis -- the automatic generation of code given a specification\n-- is one of the most fundamental tasks in artificial intelligence (AI) and\nmany programmers' dream. Numerous synthesizers have been developed to tackle\nprogram synthesis, manifesting different ideas to approach the exponentially\ngrowing program space. While numerous smart program synthesis tools exist,\nreusing and remixing previously developed methods is tedious and\ntime-consuming. We propose Herb.jl, a unifying program synthesis library\nwritten in the Julia programming language, to address these issues. Since\ncurrent methods rely on similar building blocks, we aim to modularize the\nunderlying synthesis algorithm into communicating and fully extendable\nsub-compartments, allowing for straightforward reapplication of these modules.\nTo demonstrate the benefits of using Herb.jl, we show three common use cases:\n1. how to implement a simple problem and grammar, and how to solve it, 2. how\nto implement a previously developed synthesizer with just a few lines of code,\nand 3. how to run a synthesizer against a benchmark.", "AI": {"tldr": "Herb.jl\u662f\u4e00\u4e2a\u6a21\u5757\u5316\u3001\u6613\u6269\u5c55\u7684\u7a0b\u5e8f\u5408\u6210\u5e93\uff0c\u53ef\u4ee5\u5feb\u901f\u7ec4\u5408\u548c\u590d\u7528\u5df2\u6709\u65b9\u6cd5\uff0c\u663e\u8457\u63d0\u5347\u5f00\u53d1\u6548\u7387\u3002", "motivation": "\u7a0b\u5e8f\u5408\u6210\u662fAI\u9886\u57df\u4e2d\u7684\u6838\u5fc3\u4efb\u52a1\uff0c\u4f46\u73b0\u6709\u5de5\u5177\u590d\u7528\u548c\u7ec4\u5408\u4e0d\u540c\u65b9\u6cd5\u5341\u5206\u7e41\u7410\u4e14\u8017\u65f6\u3002\u4f5c\u8005\u5e0c\u671b\u901a\u8fc7\u7edf\u4e00\u6846\u67b6\u7b80\u5316\u7a0b\u5e8f\u5408\u6210\u65b9\u6cd5\u7684\u590d\u7528\u548c\u6269\u5c55\u3002", "method": "\u63d0\u51fa\u4e86Herb.jl\u7a0b\u5e8f\u5408\u6210\u5e93\uff0c\u91c7\u7528Julia\u8bed\u8a00\u5f00\u53d1\uff0c\u5c06\u5408\u6210\u7b97\u6cd5\u6a21\u5757\u5316\u4e3a\u53ef\u901a\u8baf\u548c\u53ef\u6269\u5c55\u7684\u7ec4\u4ef6\uff0c\u4fbf\u4e8e\u7528\u6237\u91cd\u65b0\u7ec4\u88c5\u548c\u5e94\u7528\u5408\u6210\u65b9\u6cd5\u3002\u901a\u8fc7\u4e09\u4e2a\u573a\u666f\u6f14\u793a\u4e86\u5de5\u5177\u7684\u7075\u6d3b\u6027\uff1a\u5305\u62ec\u7b80\u5355\u95ee\u9898\u5b9e\u73b0\u3001\u5df2\u6709\u5de5\u5177\u590d\u523b\u548c\u57fa\u51c6\u6d4b\u8bd5\u8fd0\u884c\u3002", "result": "Herb.jl\u5b9e\u73b0\u4e86\u7b97\u6cd5\u6a21\u5757\u7684\u9ad8\u5185\u805a\u6027\u548c\u6613\u7528\u6027\uff0c\u901a\u8fc7\u5c11\u91cf\u4ee3\u7801\u5373\u53ef\u5e94\u7528\u6216\u590d\u7528\u590d\u6742\u7684\u7a0b\u5e8f\u5408\u6210\u5de5\u5177\uff0c\u6709\u6548\u63d0\u5347\u5f00\u53d1\u6548\u7387\u3002", "conclusion": "Herb.jl\u7edf\u4e00\u5e76\u6a21\u5757\u5316\u4e86\u5404\u79cd\u7a0b\u5e8f\u5408\u6210\u65b9\u6cd5\uff0c\u6781\u5927\u7b80\u5316\u4e86\u5de5\u5177\u590d\u7528\u548c\u6269\u5c55\u8fc7\u7a0b\uff0c\u5bf9\u7a0b\u5e8f\u5408\u6210\u9886\u57df\u7814\u7a76\u548c\u5e94\u7528\u63d0\u4f9b\u4e86\u91cd\u8981\u652f\u6301\u3002"}}
{"id": "2510.09932", "categories": ["cs.PL", "cs.AR"], "pdf": "https://arxiv.org/pdf/2510.09932", "abs": "https://arxiv.org/abs/2510.09932", "authors": ["Devansh Jain", "Akash Pardeshi", "Marco Frigo", "Krut Patel", "Kaustubh Khulbe", "Jai Arora", "Charith Mendis"], "title": "ACT: Automatically Generating Compiler Backends from Tensor Accelerator ISA Descriptions", "comment": null, "summary": "Tensor compilers play a key role in enabling high-performance implementations\nof deep learning workloads. These compilers rely on existing CPU and GPU code\ngeneration backends to generate device-specific code. Recently, many tensor\naccelerators (neural processing units) have been proposed to further accelerate\nthese workloads. Compared to commodity hardware, however, most of the proposed\ntensor accelerators do not have compiler backends with code generation support.\nMoreover, the accelerator designs are subject to fast iteration cycles, making\nit difficult to manually develop compiler backends similar to commodity\nhardware platforms. Therefore, to increase adoption and enable faster software\ndevelopment cycles for novel tensor accelerator designs, we need to make the\ncompiler backend construction process more agile.\n  To address this gap, we introduce ACT, a compiler backend generator that\nautomatically generates compiler backends for tensor accelerators, given just\nthe instruction set architecture (ISA) descriptions. We first formally specify\nthe compiler backend generation problem that introduces a novel specification\nfor describing tensor accelerator ISAs. Next, we design ACT such that it\nsupports user-programmable memories and complex parameterized instructions that\nare prevalent in tensor accelerators. ACT uses a novel parameterized equality\nsaturation-based instruction selection phase and a constraint programming-based\nmemory allocation phase. We prove that compiler backends generated by ACT are\nsound and complete. Finally, we generate compiler backends for three\naccelerator platforms from industry and academia, and show that they match or\noutperform code written using hand-optimized kernel libraries while maintaining\nlow compilation overheads.", "AI": {"tldr": "ACT\u80fd\u591f\u57fa\u4e8eISA\u63cf\u8ff0\uff0c\u81ea\u52a8\u751f\u6210\u9ad8\u6027\u80fd\u5f20\u91cf\u52a0\u901f\u5668\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u6709\u6548\u964d\u4f4e\u5f00\u53d1\u6210\u672c\uff0c\u63d0\u5347\u7f16\u8bd1\u6548\u7387\uff0c\u5728\u591a\u79cd\u5e73\u53f0\u4e0a\u5c55\u793a\u4e86\u5353\u8d8a\u7684\u6027\u80fd\u548c\u4f4e\u5f00\u9500\u3002", "motivation": "\u5f53\u524d\u8bb8\u591a\u65b0\u578b\u5f20\u91cf\u52a0\u901f\u5668\u7f3a\u4e4f\u81ea\u52a8\u5316\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u4e14\u7531\u4e8e\u8bbe\u8ba1\u8fed\u4ee3\u5feb\uff0c\u624b\u5de5\u5f00\u53d1\u7f16\u8bd1\u5668\u540e\u7aef\u6548\u7387\u4f4e\u4e0b\uff0c\u5f71\u54cd\u8f6f\u4ef6\u5f00\u53d1\u548c\u786c\u4ef6\u91c7\u7eb3\u3002", "method": "\u63d0\u51fa\u4e86ACT\u7cfb\u7edf\uff0c\u901a\u8fc7\u5bf9\u5f20\u91cf\u52a0\u901f\u5668ISA\u63cf\u8ff0\u81ea\u52a8\u751f\u6210\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u8bbe\u8ba1\u4e2d\u91c7\u7528\u53c2\u6570\u5316\u7b49\u4ef7\u9971\u548c\u6307\u4ee4\u9009\u62e9\u548c\u7ea6\u675f\u7f16\u7a0b\u5185\u5b58\u5206\u914d\u65b9\u6cd5\u3002", "result": "\u4e3a\u4e09\u79cd\u4ea7\u4e1a\u754c\u548c\u5b66\u672f\u754c\u7684\u52a0\u901f\u5668\u6210\u529f\u81ea\u52a8\u751f\u6210\u4e86\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u5e76\u5728\u4ee3\u7801\u6027\u80fd\u548c\u7f16\u8bd1\u6548\u7387\u4e0a\u5747\u4f18\u4e8e\u6216\u7b49\u540c\u4e8e\u624b\u5de5\u4f18\u5316\uff0c\u5b9e\u73b0\u4e86\u5f88\u597d\u7684\u901a\u7528\u6027\u548c\u81ea\u52a8\u5316\u6548\u679c\u3002", "conclusion": "ACT\u80fd\u591f\u81ea\u52a8\u3001\u9ad8\u6548\u5730\u4e3a\u5f20\u91cf\u52a0\u901f\u5668\u751f\u6210\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u751f\u6210\u7684\u540e\u7aef\u5728\u6027\u80fd\u4e0a\u53ef\u5ab2\u7f8e\u751a\u81f3\u4f18\u4e8e\u624b\u5de5\u4f18\u5316\u5e93\uff0c\u5e76\u4fdd\u6301\u4f4e\u7f16\u8bd1\u5f00\u9500\u3002"}}
{"id": "2510.10015", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.10015", "abs": "https://arxiv.org/abs/2510.10015", "authors": ["Jinhua Wu", "Yuting Wang", "Liukun Yu", "Linglong Meng"], "title": "End-to-end Compositional Verification of Program Safety through Verified and Verifying Compilation", "comment": null, "summary": "Program safety (i.e., absence of undefined behaviors) is critical for correct\noperation of computer systems. It is usually verified at the source level\n(e.g., by separation logics) and preserved to the target by verified compilers\n(e.g., CompCert), thereby achieving end-to-end verification of safety. However,\nmodern safe programming languages like Rust pose new problems in achieving\nend-to-end safety. Because not all functionalities can be implemented in the\nsafe language, mixing safe and unsafe modules is needed. Therefore, verified\ncompilation must preserve a modular notion of safety which can be composed at\nthe target level. Furthermore, certain classes of errors (e.g., memory errors)\nare automatically excluded by verifying compilation (e.g., borrow checking) for\nmodules written in safe languages. As a result, verified compilation needs to\ncooperate with verifying compilation to ensure end-to-end safety.\n  To address the above problems, we propose a modular and generic definition of\nsafety called open safety based on program semantics described as open labeled\ntransition systems (LTS). Open safety is composable at the boundary of modules\nand can be modularly preserved by verified compositional compilation. Those\nproperties enable separate verification of safety for heterogeneous modules and\ncomposition of the safety results at the target level. Open safety can be\ngeneralized to partial safety (i.e., only a certain class of errors can occur).\nBy this we formalized the correctness of verifying compilation as derivation of\ntotal safety from partial safety. We demonstrate how our framework can combine\nverified and verifying compilation by developing a verified compiler for an\nownership language (called Owlang) inspired by Rust. We evaluate our approach\non the compositional safety verification using a hash map implemented by Owlang\nand C.", "AI": {"tldr": "\u4e3a\u89e3\u51b3\u73b0\u4ee3\u5b89\u5168\u8bed\u8a00\u4e2d\u5b89\u5168\u4e0e\u975e\u5b89\u5168\u6a21\u5757\u6df7\u5408\u65f6\u7684\u7aef\u5230\u7aef\u5b89\u5168\u9a8c\u8bc1\u96be\u9898\uff0c\u672c\u6587\u63d0\u51fa\u4e86\u201c\u5f00\u653e\u5b89\u5168\u201d\u5b9a\u4e49\uff0c\u5b9e\u73b0\u4e86\u6a21\u5757\u5316\u3001\u7ec4\u5408\u5f0f\u7684\u5b89\u5168\u9a8c\u8bc1\uff0c\u5e76\u901a\u8fc7\u5728Owlang\u4e0eC\u6df7\u5408\u7a0b\u5e8f\u4e0a\u5b9e\u8bc1\u5c55\u793a\u4e86\u65b9\u6cd5\u6548\u679c\u3002", "motivation": "\u73b0\u4ee3\u5b89\u5168\u7f16\u7a0b\u8bed\u8a00\uff08\u5982Rust\uff09\u9700\u8981\u5728\u5b9e\u73b0\u5b8c\u6574\u529f\u80fd\u65f6\u6df7\u5408\u4f7f\u7528\u5b89\u5168\u4e0e\u4e0d\u5b89\u5168\u6a21\u5757\uff0c\u63d0\u9ad8\u7aef\u5230\u7aef\u5b89\u5168\u9a8c\u8bc1\u7684\u590d\u6742\u5ea6\u3002\u73b0\u6709\u65b9\u6cd5\u96be\u4ee5\u6a21\u5757\u5316\u3001\u53ef\u7ec4\u5408\u5730\u9a8c\u8bc1\u548c\u7ef4\u62a4\u6b64\u7c7b\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u3002", "method": "\u63d0\u51fa\u4e86\u57fa\u4e8e\u5f00\u653e\u6807\u7b7e\u8f6c\u6362\u7cfb\u7edf\uff08open LTS\uff09\u7684\u6a21\u5757\u5316\u3001\u901a\u7528\u7684\u201c\u5f00\u653e\u5b89\u5168\u201d\uff08open safety\uff09\u5b9a\u4e49\uff0c\u53ef\u7ec4\u5408\u5730\u5bf9\u5f02\u6784\u6a21\u5757\u5206\u522b\u9a8c\u8bc1\u5b89\u5168\u6027\uff0c\u5e76\u5728\u76ee\u6807\u7ea7\u8fdb\u884c\u7ed3\u679c\u5408\u6210\u3002\u6b64\u5916\uff0c\u63d0\u51fa\u4e86\u4ece\u201c\u90e8\u5206\u5b89\u5168\u201d\u5230\u201c\u5b8c\u5168\u5b89\u5168\u201d\u7684\u5f62\u5f0f\u5316\u9a8c\u8bc1\u7406\u8bba\uff0c\u5e76\u5b9e\u73b0\u4e86\u9002\u7528\u4e8e\u6240\u6709\u6743\u8bed\u8a00Owlang\u7684\u9a8c\u8bc1\u7f16\u8bd1\u5668\u3002", "result": "\u8be5\u65b9\u6cd5\u80fd\u591f\u652f\u6301\u5b89\u5168\u4e0e\u975e\u5b89\u5168\u6a21\u5757\u6df7\u5408\u7684\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5f00\u653e\u5b89\u5168\u5b9a\u4e49\u5b9e\u73b0\u4e86\u6a21\u5757\u7ea7\u522b\u7684\u5b89\u5168\u9a8c\u8bc1\u4e0e\u96c6\u6210\u3002\u5728Owlang\u4e0eC\u6df7\u5408\u5b9e\u73b0\u7684\u54c8\u5e0c\u6620\u5c04\u8868\u4e2d\u6210\u529f\u9a8c\u8bc1\u4e86\u7ec4\u5408\u5b89\u5168\u6027\uff0c\u8bc1\u660e\u4e86\u65b9\u6cd5\u7684\u5b9e\u7528\u6027\u4e0e\u6709\u6548\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u5f00\u653e\u5b89\u5168\u6846\u67b6\u5b9e\u73b0\u4e86\u5bf9\u4e8e\u5f02\u6784\u6a21\u5757\uff08\u5b89\u5168\u4e0e\u975e\u5b89\u5168\u4ee3\u7801\uff09\u7684\u6a21\u5757\u5316\u3001\u7ec4\u5408\u5f0f\u7684\u5b89\u5168\u9a8c\u8bc1\uff0c\u5e76\u4e3a\u7aef\u5230\u7aef\u7a0b\u5e8f\u5b89\u5168\u6027\u63d0\u4f9b\u4e86\u7406\u8bba\u548c\u5b9e\u8df5\u652f\u6301\u3002\u6846\u67b6\u80fd\u591f\u7ed3\u5408\u9a8c\u8bc1\u4e0e\u9a8c\u8bc1\u7f16\u8bd1\uff0c\u9002\u5e94\u73b0\u4ee3\u5b89\u5168\u8bed\u8a00\u548c\u7cfb\u7edf\u7684\u9700\u8981\u3002"}}
{"id": "2510.10209", "categories": ["cs.PL", "cs.LG", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.10209", "abs": "https://arxiv.org/abs/2510.10209", "authors": ["Massinissa Merouani", "Afif Boudaoud", "Riyadh Baghdadi"], "title": "LOOPerSet: A Large-Scale Dataset for Data-Driven Polyhedral Compiler Optimization", "comment": null, "summary": "The advancement of machine learning for compiler optimization, particularly\nwithin the polyhedral model, is constrained by the scarcity of large-scale,\npublic performance datasets. This data bottleneck forces researchers to\nundertake costly data generation campaigns, slowing down innovation and\nhindering reproducible research learned code optimization. To address this gap,\nwe introduce LOOPerSet, a new public dataset containing 28 million labeled data\npoints derived from 220,000 unique, synthetically generated polyhedral\nprograms. Each data point maps a program and a complex sequence of\nsemantics-preserving transformations (such as fusion, skewing, tiling, and\nparallelism)to a ground truth performance measurement (execution time). The\nscale and diversity of LOOPerSet make it a valuable resource for training and\nevaluating learned cost models, benchmarking new model architectures, and\nexploring the frontiers of automated polyhedral scheduling. The dataset is\nreleased under a permissive license to foster reproducible research and lower\nthe barrier to entry for data-driven compiler optimization.", "AI": {"tldr": "LOOPerSet\u662f\u4e00\u4e2a\u8d85\u5927\u89c4\u6a21\u591a\u9762\u4f53\u7a0b\u5e8f\u516c\u5f00\u6570\u636e\u96c6\uff0c\u652f\u6301\u673a\u5668\u5b66\u4e60\u9a71\u52a8\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u7814\u7a76\uff0c\u964d\u4f4e\u6570\u636e\u83b7\u53d6\u96be\u5ea6\u3002", "motivation": "\u7531\u4e8e\u516c\u5f00\u7684\u5927\u89c4\u6a21\u3001\u591a\u6837\u5316\u7f16\u8bd1\u5668\u6027\u80fd\u6570\u636e\u96c6\u532e\u4e4f\uff0c\u5b66\u672f\u754c\u5728\u5229\u7528\u673a\u5668\u5b66\u4e60\u63d0\u5347\u7f16\u8bd1\u5668\u4f18\u5316\u65f6\u53d7\u9650\u660e\u663e\uff0c\u6570\u636e\u91c7\u96c6\u6210\u672c\u9ad8\uff0c\u7814\u7a76\u96be\u4ee5\u590d\u73b0\u3002\u4e3a\u89e3\u51b3\u8be5\u75db\u70b9\uff0c\u4f5c\u8005\u63d0\u51fa\u5f00\u653e\u6570\u636e\u96c6\u3002", "method": "\u4f5c\u8005\u901a\u8fc7\u5408\u6210\u751f\u621022\u4e07\u4e2a\u591a\u9762\u4f53\u7a0b\u5e8f\uff0c\u5e76\u5e94\u7528\u591a\u79cd\u4fdd\u6301\u8bed\u4e49\u7684\u8f6c\u6362\u5e8f\u5217\uff08\u5982\u878d\u5408\u3001\u503e\u659c\u3001\u5206\u5757\u3001\u5e76\u884c\uff09\uff0c\u83b7\u5f97\u6bcf\u6b21\u8f6c\u6362\u540e\u7684\u771f\u5b9e\u6267\u884c\u65f6\u95f4\uff08\u6027\u80fd\uff09\u4f5c\u4e3a\u6807\u7b7e\u6570\u636e\uff0c\u6700\u7ec8\u5f62\u62102800\u4e07\u6761\u6807\u8bb0\u6570\u636e\u3002", "result": "\u672c\u6587\u63d0\u51fa\u4e86LOOPerSet\uff0c\u4e00\u4e2a\u5305\u542b2800\u4e07\u6807\u7b7e\u6570\u636e\u70b9\u548c22\u4e07\u4e2a\u72ec\u7279\u5408\u6210\u591a\u9762\u4f53\u7a0b\u5e8f\u7684\u516c\u5f00\u6570\u636e\u96c6\u3002\u6bcf\u4e2a\u6570\u636e\u70b9\u5173\u8054\u4e00\u4e2a\u7a0b\u5e8f\u548c\u4e00\u7cfb\u5217\u4fdd\u6301\u8bed\u4e49\u7684\u8f6c\u6362\u64cd\u4f5c\uff08\u5982\u878d\u5408\u3001\u503e\u659c\u3001\u5206\u5757\u548c\u5e76\u884c\u5316\uff09\u4e0e\u5176\u771f\u5b9e\u6027\u80fd\uff08\u6267\u884c\u65f6\u95f4\uff09\u3002\u8be5\u6570\u636e\u96c6\u4e3a\u8bad\u7ec3\u548c\u8bc4\u4f30\u5b66\u4e60\u578b\u6210\u672c\u6a21\u578b\u3001\u57fa\u51c6\u6d4b\u8bd5\u65b0\u6a21\u578b\u67b6\u6784\u4ee5\u53ca\u63a2\u7d22\u81ea\u52a8\u591a\u9762\u4f53\u8c03\u5ea6\u9886\u57df\u63d0\u4f9b\u4e86\u91cd\u8981\u8d44\u6e90\u3002\u6570\u636e\u96c6\u8fd8\u4ee5\u5bbd\u677e\u8bb8\u53ef\u53d1\u5e03\uff0c\u4fc3\u8fdb\u53ef\u590d\u73b0\u7814\u7a76\u5e76\u964d\u4f4e\u7f16\u8bd1\u5668\u4f18\u5316\u95e8\u69db\u3002", "conclusion": "LOOPerSet\u901a\u8fc7\u5927\u578b\u3001\u591a\u6837\u5316\u4e14\u6807\u8bb0\u5b8c\u5584\u7684\u6570\u636e\u96c6\u586b\u8865\u4e86\u7f16\u8bd1\u4f18\u5316\u9886\u57df\u6570\u636e\u7f3a\u53e3\uff0c\u6709\u52a9\u4e8e\u4fc3\u8fdb\u65b0\u6a21\u578b\u5f00\u53d1\u3001\u7814\u7a76\u590d\u73b0\u53ca\u81ea\u52a8\u8c03\u5ea6\u521b\u65b0\u3002\u5176\u516c\u5f00\u4e0e\u5bbd\u677e\u8bb8\u53ef\u6781\u5927\u964d\u4f4e\u4e86\u7814\u7a76\u95e8\u69db\u3002"}}
{"id": "2510.09721", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.09721", "abs": "https://arxiv.org/abs/2510.09721", "authors": ["Jiale Guo", "Suizhi Huang", "Mei Li", "Dong Huang", "Xingsheng Chen", "Regina Zhang", "Zhijiang Guo", "Han Yu", "Siu-Ming Yiu", "Christian Jensen", "Pietro Lio", "Kwok-Yan Lam"], "title": "A Comprehensive Survey on Benchmarks and Solutions in Software Engineering of LLM-Empowered Agentic System", "comment": "21 pages", "summary": "The integration of LLMs into software engineering has catalyzed a paradigm\nshift from traditional rule-based systems to sophisticated agentic systems\ncapable of autonomous problem-solving. Despite this transformation, the field\nlacks a comprehensive understanding of how benchmarks and solutions\ninterconnect, hindering systematic progress and evaluation. This survey\npresents the first holistic analysis of LLM-empowered software engineering,\nbridging the critical gap between evaluation and solution approaches. We\nanalyze 150+ recent papers and organize them into a comprehensive taxonomy\nspanning two major dimensions: (1) Solutions, categorized into prompt-based,\nfine-tuning-based, and agent-based paradigms, and (2) Benchmarks, covering code\ngeneration, translation, repair, and other tasks. Our analysis reveals how the\nfield has evolved from simple prompt engineering to complex agentic systems\nincorporating planning and decomposition, reasoning and self-refinement, memory\nmechanisms, and tool augmentation. We present a unified pipeline that\nillustrates the complete workflow from task specification to final\ndeliverables, demonstrating how different solution paradigms address varying\ncomplexity levels across software engineering tasks. Unlike existing surveys\nthat focus on isolated aspects, we provide full-spectrum coverage connecting\n50+ benchmarks with their corresponding solution strategies, enabling\nresearchers to identify optimal approaches for specific evaluation criteria.\nFurthermore, we identify critical research gaps and propose actionable future\ndirections, including multi-agent collaboration frameworks, self-evolving code\ngeneration systems, and integration of formal verification with LLM-based\nmethods. This survey serves as a foundational resource for researchers and\npractitioners seeking to understand, evaluate, and advance LLM-empowered\nsoftware engineering systems.", "AI": {"tldr": "\u672c\u6587\u7cfb\u7edf\u68b3\u7406\u4e86LLM\u8d4b\u80fd\u7684\u8f6f\u4ef6\u5de5\u7a0b\u7814\u7a76\u73b0\u72b6\uff0c\u63d0\u51fa\u5b8c\u6574\u8bc4\u6d4b\u2014\u89e3\u51b3\u65b9\u6848\u5bf9\u7167\u4f53\u7cfb\uff0c\u63ed\u793a\u9886\u57df\u6f14\u8fdb\u8d8b\u52bf\u4e0e\u672a\u6765\u7814\u7a76\u65b9\u5411\uff0c\u4e3a\u76f8\u5173\u5b66\u8005\u4e0e\u4ece\u4e1a\u8005\u63d0\u4f9b\u6743\u5a01\u6307\u5f15\u3002", "motivation": "\u5927\u6a21\u578b\uff08LLM\uff09\u6b63\u5728\u5f7b\u5e95\u6539\u53d8\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u4f46\u76ee\u524d\u9886\u57df\u5185\u5bf9\u8bc4\u6d4b\u65b9\u6cd5\u4e0e\u89e3\u51b3\u65b9\u6848\u4e4b\u95f4\u7684\u5173\u8054\u7f3a\u4e4f\u7cfb\u7edf\u6027\u7406\u89e3\uff0c\u963b\u788d\u4e86\u6280\u672f\u53d1\u5c55\u548c\u8bc4\u4f30\u3002", "method": "\u5bf9150\u591a\u7bc7\u8fd1\u671f\u6587\u732e\u8fdb\u884c\u7cfb\u7edf\u68b3\u7406\uff0c\u63d0\u51fa\u8986\u76d6\u201c\u89e3\u51b3\u65b9\u6848\u201d\uff08\u57fa\u4e8e\u63d0\u793a\u3001\u5fae\u8c03\u3001\u667a\u80fd\u4f53\uff09\u548c\u201c\u57fa\u51c6\u8bc4\u6d4b\u201d\uff08\u4ee3\u7801\u751f\u6210\u3001\u7ffb\u8bd1\u3001\u4fee\u590d\u7b49\u4efb\u52a1\uff09\u7684\u7efc\u5408\u5206\u7c7b\u6cd5\uff0c\u5e76\u5c55\u793a\u4ece\u4efb\u52a1\u5230\u7ed3\u679c\u7684\u7edf\u4e00\u6d41\u7a0b\u3002", "result": "\u7cfb\u7edf\u603b\u7ed3\u4e86\u9886\u57df\u4ece\u7b80\u5355\u63d0\u793a\u5de5\u7a0b\u5230\u590d\u6742\u667a\u80fd\u4f53\u7684\u6f14\u53d8\uff0c\u5168\u9762\u5173\u8054\u4e8650\u591a\u4e2a\u57fa\u51c6\u53ca\u5bf9\u5e94\u89e3\u51b3\u8303\u5f0f\uff0c\u63ed\u793a\u4e86\u7814\u7a76\u73b0\u72b6\u3001\u5b58\u5728\u95ee\u9898\uff0c\u5e76\u63d0\u51fa\u4e86\u5982\u591a\u667a\u80fd\u4f53\u534f\u4f5c\u3001\u81ea\u8fdb\u5316\u4ee3\u7801\u751f\u6210\u3001\u5f62\u5f0f\u5316\u9a8c\u8bc1\u96c6\u6210\u7b49\u672a\u6765\u65b9\u5411\u3002", "conclusion": "\u672c\u7efc\u8ff0\u9996\u6b21\u5168\u666f\u5f52\u7eb3\u4e86LLM\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u5e94\u7528\uff0c\u5f25\u8865\u4e86\u8bc4\u6d4b\u65b9\u6848\u4e0e\u89e3\u51b3\u624b\u6bb5\u7684\u8054\u7cfb\u7a7a\u767d\uff0c\u4e3a\u540e\u7eed\u7814\u7a76\u548c\u5e94\u7528\u63d0\u4f9b\u4e86\u57fa\u7840\u6027\u8d44\u6e90\u548c\u524d\u77bb\u5efa\u8bae\u3002"}}
{"id": "2510.10834", "categories": ["cs.FL", "cs.DM", "math.NT"], "pdf": "https://arxiv.org/pdf/2510.10834", "abs": "https://arxiv.org/abs/2510.10834", "authors": ["Jeffrey Shallit"], "title": "The Tribonacci constant and finite automata", "comment": null, "summary": "We show that there is no automaton accepting the Tribonacci representations\nof $n$ and $x$ in parallel, where $\\psi = 1.839\\cdots$ is the Tribonacci\nconstant, and $x= \\lfloor n \\psi \\rfloor$. Similarly, there is no Tribonacci\nautomaton generating the Sturmian characteristic word with slope $\\psi-1$.", "AI": {"tldr": "\u672c\u6587\u8bc1\u660e\u4e86\u81ea\u52a8\u673a\u65e0\u6cd5\u63a5\u53d7\u548c\u751f\u6210\u67d0\u4e9bTribonacci\u76f8\u5173\u7684\u8868\u793a\u548c\u5e8f\u5217\uff0c\u6307\u51fa\u4e86\u5176\u7406\u8bba\u5c40\u9650\u6027\u3002", "motivation": "\u63a2\u7d22Tribonacci\u8868\u793a\u6cd5\u4e0e\u81ea\u52a8\u673a\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4ee5\u53ca\u81ea\u52a8\u673a\u80fd\u5426\u5728Tribonacci\u6570\u5217\u76f8\u5173\u8ba1\u7b97\u4e2d\u8fdb\u884c\u8bc6\u522b\u548c\u751f\u6210\uff0c\u4f8b\u5982\u540c\u65f6\u5224\u5b9an\u548cx=\u230an\u03c8\u230b\u7684\u8868\u793a\u3002", "method": "\u5206\u6790\u81ea\u52a8\u673a\u5bf9Tribonacci\u6570\u5217\u53ca\u5176\u76f8\u5173\u8868\u793a\u7684\u63a5\u53d7\u80fd\u529b\uff0c\u901a\u8fc7\u7406\u8bba\u8bc1\u660e\u548c\u53cd\u4f8b\u8bf4\u660e\u81ea\u52a8\u673a\u65e0\u6cd5\u5b8c\u6210\u76f8\u5173\u4efb\u52a1\u3002", "result": "\u8bc1\u660e\u4e86\u4e0d\u5b58\u5728\u80fd\u591f\u5e76\u884c\u63a5\u53d7n\u548cx=\u230an\u03c8\u230b\u7684Tribonacci\u8868\u793a\u7684\u81ea\u52a8\u673a\uff0c\u4e5f\u4e0d\u5b58\u5728\u80fd\u591f\u751f\u6210\u659c\u7387\u4e3a\u03c8-1\u7684Sturmian\u7279\u5f81\u8bcd\u7684Tribonacci\u81ea\u52a8\u673a\u3002", "conclusion": "Tribonacci\u6570\u5217\u76f8\u5173\u7684\u67d0\u4e9b\u8ba1\u7b97\u548c\u751f\u6210\u4efb\u52a1\u8d85\u51fa\u4e86\u81ea\u52a8\u673a\u7684\u80fd\u529b\u8303\u56f4\uff0c\u81ea\u52a8\u673a\u65e0\u6cd5\u5e76\u884c\u5904\u7406\u8fd9\u4e9b\u590d\u6742\u5173\u7cfb\u3002"}}
{"id": "2510.09950", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.09950", "abs": "https://arxiv.org/abs/2510.09950", "authors": ["Andrei A. Bulatov", "Amirhossein Kazeminia"], "title": "Modular Counting over 3-Element and Conservative Domains", "comment": null, "summary": "In the Constraint Satisfaction Problem (CSP for short) the goal is to decide\nthe existence of a homomorphism from a given relational structure $G$ to a\ngiven relational structure $H$. If the structure $H$ is fixed and $G$ is the\nonly input, the problem is denoted $CSP(H)$. In its counting version,\n$\\#CSP(H)$, the task is to find the number of such homomorphisms. The CSP and\n#CSP have been used to model a wide variety of combinatorial problems and have\nreceived a tremendous amount of attention from researchers from multiple\ndisciplines.\n  In this paper we consider the modular version of the counting CSPs, that is,\nproblems of the form $\\#_pCSP(H)$ of counting the number of homomorphisms to\n$H$ modulo a fixed prime number $p$. Modular counting has been intensively\nstudied during the last decade, although mainly in the case of graph\nhomomorphisms. Here we continue the program of systematic research of modular\ncounting of homomorphisms to general relational structures. The main results of\nthe paper include a new way of reducing modular counting problems to smaller\ndomains and a study of the complexity of such problems over 3-element domains\nand over conservative domains, that is, relational structures that allow to\nexpress (in a certain exact way) every possible unary predicate.", "AI": {"tldr": "\u672c\u6587\u7cfb\u7edf\u7814\u7a76\u4e86\u4e00\u822c\u5173\u7cfb\u7ed3\u6784\u4e0a\u7684\u6a21\u8ba1\u6570CSP\uff0c\u63d0\u51fa\u4e86\u65b0\u7684\u5f52\u7ea6\u65b9\u6cd5\uff0c\u5e76\u5bf93\u5143\u57df\u548c\u4fdd\u5b88\u57df\u590d\u6742\u6027\u8fdb\u884c\u5206\u6790\uff0c\u4e3a\u8be5\u9886\u57df\u63d0\u4f9b\u4e86\u7406\u8bba\u548c\u5de5\u5177\u652f\u6301\u3002", "motivation": "\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\uff08CSP\uff09\u548c\u5176\u8ba1\u6570\u7248\u672c\u5728\u5efa\u6a21\u7ec4\u5408\u95ee\u9898\u65b9\u9762\u975e\u5e38\u91cd\u8981\uff0c\u4e14\u5f97\u5230\u5e7f\u6cdb\u7814\u7a76\u3002\u4f20\u7edf\u7684\u6a21\u8ba1\u6570\uff08\u5373\u5bf9\u540c\u6784\u8ba1\u6570\u53d6\u6a21\uff09\u7814\u7a76\u96c6\u4e2d\u4e8e\u56fe\u540c\u6784\uff0c\u4f46\u5f88\u5c11\u7cfb\u7edf\u6027\u6269\u5c55\u5230\u4e00\u822c\u5173\u7cfb\u7ed3\u6784\u3002\u56e0\u6b64\uff0c\u8be5\u7814\u7a76\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\uff0c\u5bf9\u4e00\u822c\u5173\u7cfb\u7ed3\u6784\u4e0a\u7684\u6a21\u8ba1\u6570CSP\u8fdb\u884c\u7cfb\u7edf\u6027\u7814\u7a76\u3002", "method": "\u8be5\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\uff0c\u5c06\u6a21\u8ba1\u6570\u95ee\u9898\u5f52\u7ea6\u5230\u66f4\u5c0f\u7684\u5b9a\u4e49\u57df\u4e0a\u3002\u540c\u65f6\uff0c\u6df1\u5165\u5206\u6790\u4e863\u5143\u57df\u4ee5\u53ca\u4fdd\u5b88\u57df\uff08\u80fd\u8868\u8fbe\u6240\u6709\u4e00\u5143\u8c13\u8bcd\u7684\u5173\u7cfb\u7ed3\u6784\uff09\u4e0a\u7684\u95ee\u9898\u590d\u6742\u6027\u3002", "result": "\u4e3b\u8981\u6210\u679c\u5305\u62ec\u65b0\u63d0\u51fa\u7684\u6a21\u8ba1\u6570\u95ee\u9898\u5f52\u7ea6\u65b9\u6cd5\u548c\u5bf93\u5143\u57df\u53ca\u4fdd\u5b88\u57df\u4e0a\u7684\u95ee\u9898\u590d\u6742\u6027\u5206\u7c7b\u3002\u8bba\u6587\u4e3a\u901a\u7528\u5173\u7cfb\u7ed3\u6784\u4e0a\u7684\u6a21\u8ba1\u6570\u540c\u6784\u95ee\u9898\u7814\u7a76\u63d0\u4f9b\u4e86\u5de5\u5177\u548c\u7406\u8bba\u652f\u6301\u3002", "conclusion": "\u8be5\u6587\u63a8\u52a8\u4e86\u901a\u7528\u5173\u7cfb\u7ed3\u6784\u4e0a\u6a21\u8ba1\u6570CSP\u590d\u6742\u6027\u7406\u8bba\u7684\u53d1\u5c55\uff0c\u63d0\u51fa\u4e86\u65b0\u7684\u5f52\u7ea6\u5de5\u5177\u5e76\u5bf9\u7279\u6b8a\u60c5\u5f62\u4f5c\u51fa\u590d\u6742\u6027\u523b\u753b\uff0c\u4e3a\u540e\u7eed\u8fdb\u4e00\u6b65\u7814\u7a76\u5960\u5b9a\u57fa\u7840\u3002"}}
{"id": "2510.09671", "categories": ["cs.CL"], "pdf": "https://arxiv.org/pdf/2510.09671", "abs": "https://arxiv.org/abs/2510.09671", "authors": ["Wei Zhou", "Bolei Ma", "Annemarie Friedrich", "Mohsen Mesgar"], "title": "Table Question Answering in the Era of Large Language Models: A Comprehensive Survey of Tasks, Methods, and Evaluation", "comment": null, "summary": "Table Question Answering (TQA) aims to answer natural language questions\nabout tabular data, often accompanied by additional contexts such as text\npassages. The task spans diverse settings, varying in table representation,\nquestion/answer complexity, modality involved, and domain. While recent\nadvances in large language models (LLMs) have led to substantial progress in\nTQA, the field still lacks a systematic organization and understanding of task\nformulations, core challenges, and methodological trends, particularly in light\nof emerging research directions such as reinforcement learning. This survey\naddresses this gap by providing a comprehensive and structured overview of TQA\nresearch with a focus on LLM-based methods. We provide a comprehensive\ncategorization of existing benchmarks and task setups. We group current\nmodeling strategies according to the challenges they target, and analyze their\nstrengths and limitations. Furthermore, we highlight underexplored but timely\ntopics that have not been systematically covered in prior research. By unifying\ndisparate research threads and identifying open problems, our survey offers a\nconsolidated foundation for the TQA community, enabling a deeper understanding\nof the state of the art and guiding future developments in this rapidly\nevolving area.", "AI": {"tldr": "\u672c\u6587\u7cfb\u7edf\u7efc\u8ff0\u8868\u683c\u95ee\u7b54\uff08TQA\uff09\u9886\u57df\uff0c\u7279\u522b\u5173\u6ce8\u5927\u8bed\u8a00\u6a21\u578b\u76f8\u5173\u8fdb\u5c55\uff0c\u5206\u7c7b\u68b3\u7406\u4efb\u52a1\u8bbe\u5b9a\u3001\u6311\u6218\u4e0e\u65b9\u6cd5\uff0c\u5206\u6790\u4f18\u52a3\u5e76\u6307\u51fa\u5c1a\u5f85\u63a2\u7a76\u7684\u524d\u6cbf\u95ee\u9898\uff0c\u4e3a\u63a8\u52a8\u9886\u57df\u53d1\u5c55\u63d0\u4f9b\u4e86\u6846\u67b6\u548c\u6307\u5bfc\u5efa\u8bae\u3002", "motivation": "\u8868\u683c\u95ee\u7b54\uff08TQA\uff09\u662f\u9488\u5bf9\u8868\u683c\u6570\u636e\u53ca\u76f8\u5173\u6587\u672c\u56de\u7b54\u81ea\u7136\u8bed\u8a00\u95ee\u9898\u7684\u4efb\u52a1\u3002\u7531\u4e8e\u6d89\u53ca\u591a\u79cd\u8868\u683c\u8868\u73b0\u3001\u95ee\u9898\u590d\u6742\u5ea6\u3001\u6a21\u6001\u548c\u9886\u57df\uff0c\u8be5\u9886\u57df\u53d1\u5c55\u8fc5\u901f\u4f46\u7f3a\u4e4f\u7cfb\u7edf\u6027\u7684\u6574\u7406\u548c\u7406\u89e3\uff0c\u5c24\u5176\u5728\u5f3a\u5316\u5b66\u4e60\u7b49\u65b0\u5174\u65b9\u5411\u4e0b\u3002\u6587\u732e\u4e9f\u9700\u5bf9\u73b0\u6709\u7814\u7a76\u8fdb\u884c\u68b3\u7406\uff0c\u5e2e\u52a9\u7406\u6e05\u4efb\u52a1\u8bbe\u5b9a\u4e0e\u7814\u7a76\u8d8b\u52bf\u3002", "method": "\u672c\u6587\u901a\u8fc7\u8c03\u7814\u73b0\u6709TQA\u76f8\u5173\u6587\u732e\uff0c\u91cd\u70b9\u5173\u6ce8\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u65b9\u6cd5\u3002\u5bf9\u5df2\u6709\u57fa\u51c6\u548c\u4efb\u52a1\u8bbe\u7f6e\u8fdb\u884c\u5206\u7c7b\uff0c\u5bf9\u73b0\u6709\u6a21\u578b\u7b56\u7565\u6839\u636e\u6240\u5e94\u5bf9\u7684\u6311\u6218\u5f52\u7ec4\uff0c\u5e76\u5206\u6790\u5176\u4f18\u52a3\u3002\u540c\u65f6\uff0c\u5173\u6ce8\u5c1a\u672a\u5145\u5206\u7814\u7a76\u7684\u65b0\u5174\u76f8\u5173\u4e3b\u9898\u3002", "result": "\u6587\u7ae0\u5f52\u7eb3\u4e86TQA\u9886\u57df\u7684\u4e3b\u8981\u7814\u7a76\u8def\u7ebf\uff0c\u5206\u7c7b\u6574\u7406\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u4efb\u52a1\u8bbe\u5b9a\u548c\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u603b\u7ed3\u4e86\u5f53\u524d\u65b9\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\uff0c\u5e76\u63ed\u793a\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5c40\u9650\u6027\u3002\u6b64\u5916\uff0c\u6307\u51fa\u4e86\u524d\u6cbf\u4f46\u5c1a\u672a\u6df1\u5165\u5173\u6ce8\u7684\u7814\u7a76\u8bdd\u9898\u548c\u9886\u57df\u5b58\u5728\u7684\u5f00\u653e\u95ee\u9898\u3002", "conclusion": "\u672c\u7efc\u8ff0\u7edf\u4e00\u4e86TQA\u9886\u57df\u7684\u5206\u6563\u7814\u7a76\u5e76\u63ed\u793a\u4e86\u6838\u5fc3\u6311\u6218\uff0c\u68b3\u7406\u4e86LLM\u9a71\u52a8\u7684\u7814\u7a76\u8d8b\u52bf\uff0c\u4e3a\u76f8\u5173\u793e\u533a\u63d0\u4f9b\u4e86\u57fa\u7840\u53c2\u8003\uff0c\u6709\u52a9\u4e8e\u6df1\u5165\u7406\u89e3\u73b0\u72b6\u5e76\u6307\u5bfc\u672a\u6765\u53d1\u5c55\u3002"}}
{"id": "2510.10216", "categories": ["cs.PL", "cs.AI", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.10216", "abs": "https://arxiv.org/abs/2510.10216", "authors": ["Zhechong Huang", "Zhao Zhang", "Ruyi Ji", "Tingxuan Xia", "Qihao Zhu", "Qinxiang Cao", "Zeyu Sun", "Yingfei Xiong"], "title": "Learning to Guarantee Type Correctness in Code Generation through Type-Guided Program Synthesis", "comment": null, "summary": "Language models have shown remarkable proficiency in code generation;\nnevertheless, ensuring type correctness remains a challenge. Although\ntraditional methods, such as constrained decoding, alleviate this problem by\nexternally rejecting untypable code, the model itself does not effectively\nlearn type reasoning internally, which ultimately limits its overall\nperformance. This paper introduces TyFlow, a novel system that internalizes\ntype reasoning within code generation to guide the model to learn the type\nsystem. The core of our approach is a novel type-guided program synthesis\nsystem that maintains an isomorphism between type derivation trees and\nsynthesis derivation trees, enabling a new code representation based on\nsynthesis decision sequences rather than traditional text-based token\nsequences. By offloading the complexity of type system learning to the\nrepresentation itself, models can redirect their computational resources toward\nhigher-level program semantics. Our evaluation shows that TyFlow not only\neliminates type errors but also significantly improves functional correctness,\nhighlighting the importance of aligning LMs with type systems internally.", "AI": {"tldr": "TyFlow\u901a\u8fc7\u7c7b\u578b\u9a71\u52a8\u7684\u65b0\u4ee3\u7801\u8868\u793a\uff0c\u5185\u5316\u7c7b\u578b\u63a8\u7406\u4e8e\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\uff0c\u6709\u6548\u6d88\u9664\u7c7b\u578b\u9519\u8bef\u5e76\u63d0\u5347\u4ee3\u7801\u529f\u80fd\u6b63\u786e\u6027\u3002", "motivation": "\u73b0\u6709\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u751f\u6210\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u7c7b\u578b\u6b63\u786e\u6027\u95ee\u9898\u4ecd\u96be\u4ee5\u89e3\u51b3\u3002\u4f20\u7edf\u65b9\u6cd5\u901a\u8fc7\u5916\u90e8\u673a\u5236\u62d2\u7edd\u4e0d\u53ef\u7c7b\u578b\u7684\u4ee3\u7801\uff0c\u672a\u80fd\u8ba9\u6a21\u578b\u81ea\u8eab\u638c\u63e1\u7c7b\u578b\u63a8\u7406\uff0c\u9650\u5236\u4e86\u6574\u4f53\u6027\u80fd\u63d0\u5347\u3002", "method": "\u672c\u6587\u63d0\u51faTyFlow\u7cfb\u7edf\uff0c\u5c06\u7c7b\u578b\u63a8\u7406\u5185\u5316\u4e8e\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u4e2d\u3002\u6838\u5fc3\u521b\u65b0\u5728\u4e8e\u4e00\u79cd\u7c7b\u578b\u5f15\u5bfc\u7684\u7a0b\u5e8f\u7efc\u5408\u7cfb\u7edf\uff0c\u4fdd\u6301\u7c7b\u578b\u63a8\u5bfc\u6811\u4e0e\u7efc\u5408\u63a8\u5bfc\u6811\u7684\u540c\u6784\u5173\u7cfb\uff0c\u5e76\u63d0\u51fa\u57fa\u4e8e\u7efc\u5408\u51b3\u7b56\u5e8f\u5217\u7684\u65b0\u578b\u4ee3\u7801\u8868\u793a\uff0c\u66ff\u4ee3\u4f20\u7edf\u6587\u672c\u6807\u8bb0\u5e8f\u5217\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c06\u7c7b\u578b\u7cfb\u7edf\u5b66\u4e60\u7684\u590d\u6742\u5ea6\u8f6c\u79fb\u5230\u8868\u793a\u672c\u8eab\uff0c\u4f7f\u6a21\u578b\u80fd\u5c06\u8ba1\u7b97\u8d44\u6e90\u7528\u4e8e\u66f4\u9ad8\u5c42\u6b21\u7684\u7a0b\u5e8f\u8bed\u4e49\u3002", "result": "TyFlow\u5728\u8bc4\u4f30\u4e2d\u4e0d\u4ec5\u6d88\u9664\u4e86\u7c7b\u578b\u9519\u8bef\uff0c\u8fd8\u663e\u8457\u63d0\u5347\u4e86\u51fd\u6570\u6b63\u786e\u6027\u3002", "conclusion": "\u5c06\u7c7b\u578b\u7cfb\u7edf\u4e0e\u8bed\u8a00\u6a21\u578b\u5185\u90e8\u673a\u5236\u5bf9\u9f50\u81f3\u5173\u91cd\u8981\uff0c\u80fd\u663e\u8457\u6539\u5584\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u7c7b\u578b\u6b63\u786e\u6027\u548c\u529f\u80fd\u6b63\u786e\u6027\u3002"}}
{"id": "2510.09724", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.09724", "abs": "https://arxiv.org/abs/2510.09724", "authors": ["Qiaosheng Chen", "Yang Liu", "Lei Li", "Kai Chen", "Qipeng Guo", "Gong Cheng", "Fei Yuan"], "title": "InteractScience: Programmatic and Visually-Grounded Evaluation of Interactive Scientific Demonstration Code Generation", "comment": "27 pages, 17 figures", "summary": "Large Language Models (LLMs) are increasingly capable of generating complete\napplications from natural language instructions, creating new opportunities in\nscience and education. In these domains, interactive scientific demonstrations\nare particularly valuable for explaining concepts, supporting new teaching\nmethods, and presenting research findings. Generating such demonstrations\nrequires models to combine accurate scientific knowledge with the ability to\nimplement interactive front-end code that behaves correctly and responds to\nuser actions. This capability goes beyond the scope of existing benchmarks,\nwhich typically evaluate either knowledge question answering without grounding\nin code or static web code generation without scientific interactivity. To\nevaluate this integrated ability, we design a hybrid framework that combines\nprogrammatic functional testing to rigorously verify interaction logic with\nvisually-grounded qualitative testing to assess rendered outputs against\nreference snapshots. Building on this framework, we present InteractScience, a\nbenchmark consisting of a substantial set of carefully designed questions\nacross five scientific domains, each paired with unit tests, reference\nsnapshots, and checklists. We evaluate 30 leading open- and closed-source LLMs\nand report results that highlight ongoing weaknesses in integrating domain\nknowledge with interactive front-end coding. Our work positions InteractScience\nas the first benchmark to automatically measure this combined capability with\nrealistic interactive operations, providing a foundation for advancing reliable\nand educationally useful scientific demonstration code generation. All code and\ndata are publicly available at https://github.com/open-compass/InteractScience.", "AI": {"tldr": "\u672c\u6587\u63d0\u51faInteractScience\u57fa\u51c6\uff0c\u7cfb\u7edf\u8bc4\u6d4bLLM\u751f\u6210\u4ea4\u4e92\u79d1\u5b66\u6f14\u793a\u4ee3\u7801\u7684\u80fd\u529b\uff0c\u53d1\u73b0\u5176\u5728\u77e5\u8bc6\u4e0e\u524d\u7aef\u4ea4\u4e92\u6574\u5408\u65b9\u9762\u4ecd\u6709\u4e0d\u8db3\uff0c\u5e76\u4e3a\u9886\u57df\u53d1\u5c55\u548c\u5e94\u7528\u843d\u5730\u63d0\u4f9b\u4e86\u6709\u6548\u68c0\u9a8c\u5de5\u5177\u3002", "motivation": "\u73b0\u6709LLM\u8bc4\u6d4b\u53ea\u5173\u6ce8\u77e5\u8bc6\u95ee\u7b54\u6216\u9759\u6001\u4ee3\u7801\u751f\u6210\uff0c\u7f3a\u4e4f\u5bf9\u79d1\u5b66\u9886\u57df\u77e5\u8bc6\u4e0e\u524d\u7aef\u4ea4\u4e92\u6027\u4ee3\u7801\u96c6\u6210\u80fd\u529b\u7684\u771f\u5b9e\u6d4b\u8bc4\uff0c\u5236\u7ea6\u4e86\u79d1\u5b66\u6f14\u793a\u7c7b\u5e94\u7528\u7684\u5f00\u53d1\u4e0e\u6559\u80b2\u4ef7\u503c\u3002", "method": "\u8bbe\u8ba1\u4e86\u7ed3\u5408\u7a0b\u5e8f\u5316\u529f\u80fd\u6d4b\u8bd5\u4e0e\u89c6\u89c9\u5b9a\u6027\u6d4b\u8bd5\u7684\u6df7\u5408\u8bc4\u6d4b\u6846\u67b6\uff0c\u5e76\u521b\u5efa\u6db5\u76d6\u4e94\u5927\u79d1\u5b66\u9886\u57df\u7684\u9898\u96c6\uff0c\u914d\u5957\u5355\u5143\u6d4b\u8bd5\u3001\u53c2\u8003\u5feb\u7167\u53ca\u68c0\u6838\u8868\uff0c\u5bf930\u4e2a\u4e3b\u6d41\u5f00\u6e90\u53ca\u95ed\u6e90LLM\u8fdb\u884c\u7cfb\u7edf\u5316\u8bc4\u4f30\u3002", "result": "\u5b9e\u9a8c\u663e\u793a\u5f53\u524dLLM\u5728\u79d1\u5b66\u77e5\u8bc6\u4e0e\u4ea4\u4e92\u524d\u7aef\u4ee3\u7801\u6574\u5408\u80fd\u529b\u65b9\u9762\u4ecd\u6709\u660e\u663e\u77ed\u677f\uff0cInteractScience\u63ed\u793a\u4e86\u8be5\u65b9\u5411\u7684\u6311\u6218\u548c\u6539\u8fdb\u7a7a\u95f4\uff0c\u4e3a\u672a\u6765\u76f8\u5173\u4efb\u52a1\u63d0\u4f9b\u4e86\u771f\u5b9e\u8bc4\u6d4b\u548c\u53d1\u5c55\u6839\u57fa\u3002", "conclusion": "InteractScience\u4e3a\u81ea\u52a8\u8bc4\u6d4b\u5927\u8bed\u8a00\u6a21\u578b\u5728\u79d1\u5b66\u9886\u57df\u4ea4\u4e92\u6027\u4ee3\u7801\u751f\u6210\u80fd\u529b\u63d0\u4f9b\u4e86\u7b2c\u4e00\u4e2a\u7cfb\u7edf\u5316\u7684\u57fa\u51c6\uff0c\u4e3a\u76f8\u5173\u80fd\u529b\u7684\u63d0\u5347\u548c\u7814\u7a76\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2510.11007", "categories": ["cs.PL", "cs.FL"], "pdf": "https://arxiv.org/pdf/2510.11007", "abs": "https://arxiv.org/abs/2510.11007", "authors": ["Antonina Nepeivoda", "Ilya Afanasyev"], "title": "Abstract String Domain Defined with Word Equations as a Reduced Product (Extended Version)", "comment": null, "summary": "We introduce a string-interval abstract domain, where string intervals are\ncharacterized by systems of word equations (encoding lower bounds on string\nvalues) and word disequalities (encoding upper bounds). Building upon the\nlattice structure of string intervals, we define an abstract string object as a\nreduced product on a string property semilattice, determined by\nlength-non-increasing morphisms. We consider several reduction strategies for\nabstract string objects and show that upon these strategies the string object\ndomain forms a lattice. We define basic abstract string operations on the\ndomain, aiming to minimize computational overheads on the reduction, and show\nhow the domain can be used to analyse properties of JavaScript string\nmanipulating programs.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u65b0\u5b57\u7b26\u4e32\u533a\u95f4\u62bd\u8c61\u57df\u53ca\u7ea6\u7b80\u7b56\u7565\uff0c\u6709\u6548\u652f\u6301JavaScript\u5b57\u7b26\u4e32\u64cd\u4f5c\u7a0b\u5e8f\u5206\u6790\u3002", "motivation": "\u5f53\u524dJavaScript\u7b49\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5b57\u7b26\u4e32\u64cd\u4f5c\u975e\u5e38\u666e\u904d\uff0c\u4f46\u7531\u4e8e\u5b57\u7b26\u4e32\u53ef\u80fd\u65e0\u9650\u591a\u6837\uff0c\u9759\u6001\u5206\u6790\u5176\u5c5e\u6027\u548c\u884c\u4e3a\u5177\u6709\u6311\u6218\u6027\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u66f4\u7cbe\u786e\u4e14\u5b9e\u7528\u7684\u65b9\u6cd5\u6765\u63cf\u8ff0\u548c\u5206\u6790\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u7a0b\u5e8f\u884c\u4e3a\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u533a\u95f4\u62bd\u8c61\u57df\uff08string-interval abstract domain\uff09\uff0c\u7528\u4e00\u7ec4\u5355\u8bcd\u65b9\u7a0b\uff08\u7f16\u7801\u5b57\u7b26\u4e32\u7684\u4e0b\u754c\uff09\u548c\u5355\u8bcd\u4e0d\u7b49\u5f0f\uff08\u7f16\u7801\u5b57\u7b26\u4e32\u7684\u4e0a\u754c\uff09\u6765\u523b\u753b\u5b57\u7b26\u4e32\u533a\u95f4\u3002\u57fa\u4e8e\u8fd9\u79cd\u533a\u95f4\u7684\u683c\u7ed3\u6784\uff0c\u5b9a\u4e49\u4e86\u62bd\u8c61\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u5e76\u91c7\u7528\u957f\u5ea6-\u4e0d\u9012\u589e\u6620\u5c04\u5c06\u5176\u5efa\u6a21\u4e3a\u534a\u683c\u7684\u7ea6\u7b80\u4e58\u79ef\uff0c\u5e76\u7ed9\u51fa\u591a\u79cd\u7ea6\u7b80\u7b56\u7565\uff0c\u4fdd\u8bc1\u5176\u57df\u7ed3\u6784\u5f62\u6210\u683c\u3002\u6b64\u5916\uff0c\u8fd8\u8bbe\u8ba1\u4e86\u57fa\u672c\u7684\u62bd\u8c61\u5b57\u7b26\u4e32\u64cd\u4f5c\uff0c\u4ee5\u51cf\u5c11\u7ea6\u7b80\u5e26\u6765\u7684\u8ba1\u7b97\u5f00\u9500\u3002", "result": "\u8bc1\u660e\u4e86\u5728\u8fd9\u4e9b\u7ea6\u7b80\u7b56\u7565\u4e0b\uff0c\u62bd\u8c61\u5b57\u7b26\u4e32\u5bf9\u8c61\u57df\u6784\u6210\u4e00\u4e2a\u683c\uff0c\u5e76\u5c55\u793a\u4e86\u8be5\u62bd\u8c61\u57df\u5982\u4f55\u6709\u6548\u5206\u6790JavaScript\u5b57\u7b26\u4e32\u64cd\u4f5c\u76f8\u5173\u7684\u7a0b\u5e8f\u5c5e\u6027\u3002", "conclusion": "\u672c\u6587\u7684\u65b9\u6cd5\u901a\u8fc7\u65b0\u9896\u7684\u5b57\u7b26\u4e32\u533a\u95f4\u62bd\u8c61\uff0c\u63d0\u9ad8\u4e86\u5bf9\u5b57\u7b26\u4e32\u64cd\u4f5c\u7a0b\u5e8f\u7684\u9759\u6001\u5206\u6790\u7cbe\u5ea6\u548c\u6548\u7387\uff0c\u5c24\u5176\u9002\u7528\u4e8eJavaScript\u76f8\u5173\u573a\u666f\u3002"}}
{"id": "2510.10131", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.10131", "abs": "https://arxiv.org/abs/2510.10131", "authors": ["Jian Fang", "Yican Sun", "Yingfei Xiong"], "title": "Proof Strategy Extraction from LLMs for Enhancing Symbolic Provers", "comment": null, "summary": "One important approach to software verification is interactive theorem\nproving. However, writing formal proofs often requires substantial human\neffort, making proof automation highly important. Traditionally, proof\nautomation has relied on symbolic provers. Recently, large language models\n(LLMs) have demonstrated strong capabilities in theorem proving, complementing\nsymbolic provers. Nonetheless, prompting LLMs can be expensive and may pose\nsecurity risks for confidential codebases. As a result, purely symbolic\napproaches remain important even in the LLM era, as they are cost-effective,\nsecure, and complement the strengths of LLMs.\n  Motivated by these considerations, we ask a new research question: can we\nextract the internal strategies of LLMs to enhance the capabilities of symbolic\nprovers? As an initial attempt to answer this question, we propose Strat2Rocq,\nwhich extracts proof strategies from LLMs and formalizes them as lemmas in\nRocq. These lemmas are accessible to symbolic provers such as CoqHammer. With\nthe addition of these LLM-extracted lemmas, CoqHammer is able to prove more\ntheorems. The knowledge extraction process involves analyzing the proof\ntrajectories of LLMs on a training set of proved theorems. For each theorem, we\nprompt the LLM to generate a natural language proof, then ask it to summarize\nthis proof into formalized lemmas with proofs. We also employ a standard\nagentic approach to mitigate errors during formalization. Our evaluation\ndemonstrates that, on open-source Rocq projects for software verification,\nStrat2Rocq enhances the success rate of CoqHammer by 13.41%.", "AI": {"tldr": "\u672c\u6587\u63d0\u51faStrat2Rocq\u65b9\u6cd5\uff0c\u5c06LLM\u7684\u8bc1\u660e\u7b56\u7565\u8f6c\u5316\u4e3a\u5f62\u5f0f\u5316\u5f15\u7406\uff0c\u4f9b\u7b26\u53f7\u8bc1\u660e\u5668\u8c03\u7528\u3002\u5b9e\u9a8c\u8868\u660e\u8be5\u65b9\u6cd5\u4f7f\u81ea\u52a8\u5316\u8bc1\u660e\u5de5\u5177CoqHammer\u6210\u529f\u7387\u63d0\u534713.41%\uff0c\u663e\u793a\u4eceLLM\u63d0\u53d6\u77e5\u8bc6\u53ef\u663e\u8457\u589e\u5f3a\u7b26\u53f7\u5de5\u5177\u80fd\u529b\u3002", "motivation": "\u8f6f\u4ef6\u9a8c\u8bc1\u4e2d\uff0c\u4ea4\u4e92\u5f0f\u5b9a\u7406\u8bc1\u660e\u9700\u8981\u5927\u91cf\u4eba\u5de5\uff0c\u4f46\u5199\u6b63\u5f0f\u8bc1\u660e\u5f88\u8017\u65f6\uff0c\u63d0\u9ad8\u81ea\u52a8\u5316\u5f88\u91cd\u8981\u3002\u76ee\u524d\u81ea\u52a8\u5316\u5de5\u5177\u591a\u4f9d\u8d56\u7b26\u53f7\u8bc1\u660e\u5668\uff0c\u4e0d\u8fc7\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u5728\u5b9a\u7406\u8bc1\u660e\u65b9\u9762\u4e5f\u5c55\u73b0\u4e86\u5f3a\u5927\u80fd\u529b\u3002\u4f46\u76f4\u63a5\u4f7f\u7528LLM\u6210\u672c\u9ad8\uff0c\u5b89\u5168\u6027\u5dee\uff0c\u56e0\u6b64\u7eaf\u7b26\u53f7\u65b9\u6cd5\u4f9d\u7136\u91cd\u8981\u3002\u672c\u6587\u63a2\u7d22\u80fd\u5426\u4eceLLM\u63d0\u53d6\u5185\u90e8\u7b56\u7565\u4ee5\u589e\u5f3a\u7b26\u53f7\u8bc1\u660e\u5668\u80fd\u529b\u3002", "method": "\u63d0\u51faStrat2Rocq\u65b9\u6cd5\uff0c\u5c06LLM\u4ea7\u751f\u7684\u8bc1\u660e\u7b56\u7565\u63d0\u53d6\u5e76\u5f62\u5f0f\u5316\u4e3aRocq\u4e2d\u7684\u5f15\u7406\uff0c\u4f7f\u7b26\u53f7\u8bc1\u660e\u5668\uff08\u5982CoqHammer\uff09\u53ef\u4ee5\u8c03\u7528\u3002\u5177\u4f53\u505a\u6cd5\u662f\u8ba9LLM\u751f\u6210\u5b9a\u7406\u7684\u81ea\u7136\u8bed\u8a00\u8bc1\u660e\uff0c\u518d\u8ba9\u5176\u603b\u7ed3\u4e3a\u5e26\u8bc1\u660e\u7684\u5f62\u5f0f\u5316\u5f15\u7406\uff0c\u5e76\u901a\u8fc7\u6807\u51c6\u7684agentic\u65b9\u6cd5\u7ea0\u9519\u3002\u7136\u540e\u5c06\u8fd9\u4e9b\u65b0\u5f15\u7406\u52a0\u5165CoqHammer\u4ee5\u63d0\u5347\u5176\u81ea\u52a8\u5316\u8bc1\u660e\u80fd\u529b\u3002", "result": "\u5c06LLM\u63d0\u53d6\u7684\u5f15\u7406\u52a0\u5165\u540e\uff0cCoqHammer\u5728\u5f00\u6e90Rocq\u9879\u76ee\u4e0a\u7684\u8bc1\u660e\u6210\u529f\u7387\u63d0\u5347\u4e8613.41%\u3002", "conclusion": "\u901a\u8fc7\u63d0\u53d6\u548c\u5f62\u5f0f\u5316LLM\u7684\u7b56\u7565\uff0c\u5f15\u5165\u7b26\u53f7\u8bc1\u660e\u5668\u540e\u663e\u8457\u63d0\u5347\u4e86\u5b9a\u7406\u81ea\u52a8\u5316\u8bc1\u660e\u80fd\u529b\uff0c\u8bc1\u660e\u4e86\u4e8c\u8005\u4e92\u8865\u4e0e\u534f\u540c\u4ef7\u503c\u3002"}}
